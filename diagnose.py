#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ Content Manager Bot
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã
"""

import os
import sys
import importlib
import asyncio
from pathlib import Path
from typing import Dict, List, Tuple
import aiosqlite


class BotDiagnostic:
    def __init__(self):
        self.errors = []
        self.warnings = []
        self.fixed = []

    def check_python_version(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python"""
        print("üîç –ü—Ä–æ–≤–µ—Ä—è—é –≤–µ—Ä—Å–∏—é Python...")
        if sys.version_info < (3, 8):
            self.errors.append(f"‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.8+, —É –≤–∞—Å {sys.version}")
            return False
        print(f"‚úÖ Python {sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro}")
        return True

    def check_dependencies(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        print("\nüîç –ü—Ä–æ–≤–µ—Ä—è—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏...")

        required_packages = {
            'aiogram': '3.3.0',
            'openai': '1.3.8',
            'numpy': None,
            'sklearn': None,
            'aiohttp': '3.9.1',
            'aiosqlite': '0.19.0',
            'psutil': None,
            'dotenv': None
        }

        missing = []

        for package, version in required_packages.items():
            try:
                if package == 'sklearn':
                    importlib.import_module('sklearn')
                elif package == 'dotenv':
                    importlib.import_module('dotenv')
                else:
                    importlib.import_module(package)
                print(f"‚úÖ {package} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except ImportError:
                missing.append(package)
                self.errors.append(f"‚ùå –ü–∞–∫–µ—Ç {package} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

        if missing:
            print(f"\n‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–∞–∫–µ—Ç—ã: {', '.join(missing)}")
            print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö –∫–æ–º–∞–Ω–¥–æ–π: pip install -r requirements.txt")
            return False

        return True

    def check_project_structure(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞"""
        print("\nüîç –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞...")

        required_dirs = ['handlers', 'services', 'utils', 'database', 'data', 'logs']
        required_files = {
            'main.py': '–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞',
            'config.py': '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è',
            'requirements.txt': '–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏',
            'handlers/__init__.py': '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è handlers',
            'services/__init__.py': '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è services',
            'utils/__init__.py': '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è utils',
            'database/__init__.py': '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è database',
            'database/models.py': '–ú–æ–¥–µ–ª–∏ –ë–î',
            'utils/keyboards.py': '–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã',
        }

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        for dir_name in required_dirs:
            if not Path(dir_name).exists():
                print(f"üìÅ –°–æ–∑–¥–∞—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é {dir_name}/")
                Path(dir_name).mkdir(exist_ok=True)
                self.fixed.append(f"–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {dir_name}")
            else:
                print(f"‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {dir_name}/ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã
        for file_path, description in required_files.items():
            if not Path(file_path).exists():
                self.warnings.append(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∞–π–ª {file_path} ({description})")

                # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—ã–µ __init__.py
                if file_path.endswith('__init__.py'):
                    Path(file_path).touch()
                    self.fixed.append(f"–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª {file_path}")
            else:
                print(f"‚úÖ –§–∞–π–ª {file_path} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

        return True

    def check_configuration(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        print("\nüîç –ü—Ä–æ–≤–µ—Ä—è—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é...")

        config_files = ['.env', 'config.json', 'keys.py']
        config_found = False

        for config_file in config_files:
            if Path(config_file).exists():
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {config_file}")
                config_found = True
                break

        if not config_found:
            self.errors.append("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (.env, config.json –∏–ª–∏ keys.py)")
            print("\nüí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ quick_setup.py –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        try:
            from config import config
            if config.validate_config():
                print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞")
                return True
            else:
                self.errors.append("‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é")
                return False
        except Exception as e:
            self.errors.append(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {str(e)}")
            return False

    def check_ai_components(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ò–ò –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        print("\nüîç –ü—Ä–æ–≤–µ—Ä—è—é –ò–ò –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã...")

        ai_files = {
            'services/smart_analyzer.py': '–£–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä',
            'services/performance_tracker.py': '–¢—Ä–µ–∫–µ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏',
            'handlers/ai_control.py': '–ò–ò –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è',
            'handlers/ai_management.py': '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ò–ò',
            'handlers/analytics_pro.py': '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞'
        }

        for file_path, description in ai_files.items():
            if Path(file_path).exists():
                print(f"‚úÖ {description} –Ω–∞–π–¥–µ–Ω")
            else:
                self.warnings.append(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç {description} ({file_path})")

        return True

    def check_imports(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤"""
        print("\nüîç –ü—Ä–æ–≤–µ—Ä—è—é –∏–º–ø–æ—Ä—Ç—ã...")

        test_imports = [
            ('aiogram', 'Telegram Bot Framework'),
            ('openai', 'OpenAI API'),
            ('numpy', 'NumPy'),
            ('sklearn', 'Scikit-learn'),
            ('psutil', 'System monitoring')
        ]

        all_ok = True

        for module_name, description in test_imports:
            try:
                if module_name == 'sklearn':
                    importlib.import_module('sklearn')
                else:
                    importlib.import_module(module_name)
                print(f"‚úÖ {description} —Ä–∞–±–æ—Ç–∞–µ—Ç")
            except ImportError as e:
                self.errors.append(f"‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å {module_name}: {str(e)}")
                all_ok = False

        return all_ok

    async def check_database(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        print("\nüîç –ü—Ä–æ–≤–µ—Ä—è—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")

        try:
            from database.models import DatabaseModels
            from config import DATABASE_PATH

            db = DatabaseModels(DATABASE_PATH)
            await db.init_database()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
            async with aiosqlite.connect(DATABASE_PATH) as conn:
                cursor = await conn.execute(
                    "SELECT name FROM sqlite_master WHERE type='table'"
                )
                tables = await cursor.fetchall()
                table_names = [t[0] for t in tables]

                required_tables = ['channels', 'news_sources', 'settings', 'posts', 'performance_metrics']

                for table in required_tables:
                    if table in table_names:
                        print(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ {table} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                    else:
                        self.warnings.append(f"‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ {table} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

            return True

        except Exception as e:
            self.errors.append(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î: {str(e)}")
            return False

    def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
        print("\n" + "=" * 60)
        print("üìä –û–¢–ß–ï–¢ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò")
        print("=" * 60)

        if not self.errors and not self.warnings:
            print("\nüéâ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –æ—Ç–ª–∏—á–Ω–æ!")
            print("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É")
        else:
            if self.errors:
                print(f"\n‚ùå –ù–∞–π–¥–µ–Ω–æ –æ—à–∏–±–æ–∫: {len(self.errors)}")
                for error in self.errors:
                    print(f"   {error}")

            if self.warnings:
                print(f"\n‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {len(self.warnings)}")
                for warning in self.warnings:
                    print(f"   {warning}")

        if self.fixed:
            print(f"\nüîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: {len(self.fixed)}")
            for fix in self.fixed:
                print(f"   ‚úÖ {fix}")

        print("\nüìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")

        if self.errors:
            print("1. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏")
            print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ pip install -r requirements.txt")
            print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é (python quick_setup.py)")
        elif self.warnings:
            print("1. –ë–æ—Ç –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å, –Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã")
            print("2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ò–ò –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–∑ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤")
        else:
            print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞: python main.py")
            print("2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /ai –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ò–ò —Ñ—É–Ω–∫—Ü–∏—è–º")

    def fix_common_issues(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–∏—á–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º"""
        print("\nüîß –ü—ã—Ç–∞—é—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã...")

        # –°–æ–∑–¥–∞–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ __init__.py
        init_dirs = ['handlers', 'services', 'utils', 'database']
        for dir_name in init_dirs:
            init_path = Path(dir_name) / '__init__.py'
            if not init_path.exists() and Path(dir_name).exists():
                init_path.touch()
                self.fixed.append(f"–°–æ–∑–¥–∞–Ω {init_path}")

        # –°–æ–∑–¥–∞–µ–º .gitignore –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        if not Path('.gitignore').exists():
            gitignore_content = """# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
.env
config.json
keys.py
*.pyc
__pycache__/
data/*.db
logs/*.log
"""
            Path('.gitignore').write_text(gitignore_content)
            self.fixed.append("–°–æ–∑–¥–∞–Ω .gitignore")

        return True


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    print("ü§ñ Content Manager Bot - –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ v1.0")
    print("=" * 60)

    diagnostic = BotDiagnostic()

    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏
    diagnostic.check_python_version()
    diagnostic.check_project_structure()
    diagnostic.check_configuration()
    diagnostic.check_dependencies()
    diagnostic.check_ai_components()
    diagnostic.check_imports()

    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    await diagnostic.check_database()

    # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã
    diagnostic.fix_common_issues()

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    diagnostic.generate_report()

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
    if diagnostic.errors:
        return 1
    else:
        return 0


if __name__ == "__main__":
    try:
        exit_code = asyncio.run(main())
        sys.exit(exit_code)
    except KeyboardInterrupt:
        print("\n\n‚ùå –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞")
        sys.exit(1)
    except Exception as e:
        print(f"\n\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        sys.exit(1)