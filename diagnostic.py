#!/usr/bin/env python3
"""
–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ Content Manager Bot
–ó–∞–ø—É—Å–∫: python diagnostic.py
"""

import os
import sys
import importlib
from pathlib import Path
import logging


# –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
class Colors:
    GREEN = '\033[92m'
    RED = '\033[91m'
    YELLOW = '\033[93m'
    BLUE = '\033[94m'
    BOLD = '\033[1m'
    END = '\033[0m'


def print_status(status, message):
    """–ü–µ—á–∞—Ç—å —Å—Ç–∞—Ç—É—Å–∞ —Å —Ü–≤–µ—Ç–æ–º"""
    if status == "OK":
        print(f"{Colors.GREEN}‚úÖ {message}{Colors.END}")
    elif status == "ERROR":
        print(f"{Colors.RED}‚ùå {message}{Colors.END}")
    elif status == "WARNING":
        print(f"{Colors.YELLOW}‚ö†Ô∏è {message}{Colors.END}")
    elif status == "INFO":
        print(f"{Colors.BLUE}‚ÑπÔ∏è {message}{Colors.END}")


def check_python_version():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python"""
    print(f"\n{Colors.BOLD}üêç –ü–†–û–í–ï–†–ö–ê PYTHON{Colors.END}")

    version = sys.version_info
    if version >= (3, 8):
        print_status("OK", f"Python {version.major}.{version.minor}.{version.micro}")
        return True
    else:
        print_status("ERROR", f"Python {version.major}.{version.minor}.{version.micro} - —Ç—Ä–µ–±—É–µ—Ç—Å—è 3.8+")
        return False


def check_file_structure():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤"""
    print(f"\n{Colors.BOLD}üìÅ –ü–†–û–í–ï–†–ö–ê –°–¢–†–£–ö–¢–£–†–´ –§–ê–ô–õ–û–í{Colors.END}")

    required_files = [
        ("main.py", True),
        ("config.py", True),
        ("requirements.txt", True),
        (".env", False),
        ("handlers/__init__.py", True),
        ("handlers/admin.py", True),
        ("handlers/ai_management.py", False),
        ("services/__init__.py", True),
        ("services/content_manager.py", False),
        ("services/scheduler.py", False),
        ("utils/__init__.py", True),
        ("utils/keyboards.py", True),
        ("utils/monitoring.py", False),
        ("database/__init__.py", True),
        ("database/models.py", True),
    ]

    missing_critical = []
    missing_optional = []

    for file_path, is_critical in required_files:
        if Path(file_path).exists():
            print_status("OK", f"{file_path}")
        else:
            if is_critical:
                print_status("ERROR", f"{file_path} - –û–¢–°–£–¢–°–¢–í–£–ï–¢ (–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π)")
                missing_critical.append(file_path)
            else:
                print_status("WARNING", f"{file_path} - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π)")
                missing_optional.append(file_path)

    return len(missing_critical) == 0, missing_critical, missing_optional


def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print(f"\n{Colors.BOLD}üì¶ –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô{Colors.END}")

    critical_deps = [
        "aiogram",
        "aiohttp",
        "aiosqlite",
        "python_dotenv"
    ]

    optional_deps = [
        "openai",
        "feedparser",
        "beautifulsoup4",
        "psutil",
        "numpy",
        "matplotlib"
    ]

    missing_critical = []
    missing_optional = []

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    for dep in critical_deps:
        try:
            importlib.import_module(dep.replace("-", "_"))
            print_status("OK", f"{dep}")
        except ImportError:
            print_status("ERROR", f"{dep} - –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù (–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π)")
            missing_critical.append(dep)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    for dep in optional_deps:
        try:
            importlib.import_module(dep.replace("-", "_"))
            print_status("OK", f"{dep}")
        except ImportError:
            print_status("WARNING", f"{dep} - –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π)")
            missing_optional.append(dep)

    return len(missing_critical) == 0, missing_critical, missing_optional


def check_configuration():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print(f"\n{Colors.BOLD}‚öôÔ∏è –ü–†–û–í–ï–†–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò{Colors.END}")

    issues = []

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º .env —Ñ–∞–π–ª
    if Path(".env").exists():
        print_status("OK", ".env —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω")

        try:
            from dotenv import load_dotenv
            load_dotenv()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            bot_token = os.getenv('BOT_TOKEN')
            openai_key = os.getenv('OPENAI_API_KEY')
            admin_id = os.getenv('ADMIN_ID')

            if bot_token:
                if len(bot_token) > 40 and ':' in bot_token:
                    print_status("OK", "BOT_TOKEN –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
                else:
                    print_status("ERROR", "BOT_TOKEN –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
                    issues.append("BOT_TOKEN")
            else:
                print_status("ERROR", "BOT_TOKEN –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                issues.append("BOT_TOKEN")

            if openai_key:
                if openai_key.startswith('sk-'):
                    print_status("OK", "OPENAI_API_KEY –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
                else:
                    print_status("WARNING", "OPENAI_API_KEY –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
            else:
                print_status("WARNING", "OPENAI_API_KEY –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç (–ò–ò –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)")

            if admin_id:
                try:
                    int(admin_id)
                    print_status("OK", "ADMIN_ID –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
                except ValueError:
                    print_status("ERROR", "ADMIN_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
                    issues.append("ADMIN_ID")
            else:
                print_status("ERROR", "ADMIN_ID –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                issues.append("ADMIN_ID")

        except ImportError:
            print_status("ERROR", "python-dotenv –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            issues.append("python-dotenv")
    else:
        print_status("ERROR", ".env —Ñ–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        issues.append(".env file")

    return len(issues) == 0, issues


def check_imports():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤"""
    print(f"\n{Colors.BOLD}üîó –ü–†–û–í–ï–†–ö–ê –ò–ú–ü–û–†–¢–û–í{Colors.END}")

    test_imports = [
        ("config", "config.py"),
        ("database.models", "database/models.py"),
        ("utils.keyboards", "utils/keyboards.py"),
        ("handlers.admin", "handlers/admin.py"),
    ]

    failed_imports = []

    for module_name, file_path in test_imports:
        try:
            importlib.import_module(module_name)
            print_status("OK", f"{module_name}")
        except Exception as e:
            print_status("ERROR", f"{module_name} - {str(e)}")
            failed_imports.append((module_name, str(e)))

    return len(failed_imports) == 0, failed_imports


def check_database():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print(f"\n{Colors.BOLD}üóÑÔ∏è –ü–†–û–í–ï–†–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•{Colors.END}")

    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ë–î
        import aiosqlite
        import asyncio

        async def test_db():
            try:
                os.makedirs("data", exist_ok=True)
                async with aiosqlite.connect("data/test.db") as db:
                    await db.execute("CREATE TABLE IF NOT EXISTS test (id INTEGER)")
                    await db.commit()

                # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ë–î
                if os.path.exists("data/test.db"):
                    os.remove("data/test.db")

                return True
            except Exception as e:
                return False, str(e)

        result = asyncio.run(test_db())
        if result is True:
            print_status("OK", "SQLite —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
        else:
            print_status("ERROR", f"–û—à–∏–±–∫–∞ SQLite: {result[1]}")
            return False

    except Exception as e:
        print_status("ERROR", f"aiosqlite –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {str(e)}")
        return False


def suggest_fixes(missing_files, missing_deps, config_issues, import_errors):
    """–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é"""
    print(f"\n{Colors.BOLD}üîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Æ{Colors.END}")

    if missing_files:
        print(f"\n{Colors.YELLOW}üìÅ –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã:{Colors.END}")
        for file in missing_files:
            print(f"   ‚Ä¢ {file}")
        print("   –†–µ—à–µ–Ω–∏–µ: –°–∫–∞—á–∞–π—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ñ–∞–π–ª—ã –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞")

    if missing_deps:
        print(f"\n{Colors.YELLOW}üì¶ –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:{Colors.END}")
        for dep in missing_deps:
            print(f"   ‚Ä¢ {dep}")
        print("   –†–µ—à–µ–Ω–∏–µ: pip install " + " ".join(missing_deps))

    if config_issues:
        print(f"\n{Colors.YELLOW}‚öôÔ∏è –ü—Ä–æ–±–ª–µ–º—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:{Colors.END}")
        for issue in config_issues:
            print(f"   ‚Ä¢ {issue}")
        print("   –†–µ—à–µ–Ω–∏–µ: –°–æ–∑–¥–∞–π—Ç–µ/–∏—Å–ø—Ä–∞–≤—å—Ç–µ .env —Ñ–∞–π–ª —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏")

    if import_errors:
        print(f"\n{Colors.YELLOW}üîó –û—à–∏–±–∫–∏ –∏–º–ø–æ—Ä—Ç–∞:{Colors.END}")
        for module, error in import_errors:
            print(f"   ‚Ä¢ {module}: {error}")
        print("   –†–µ—à–µ–Ω–∏–µ: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–æ–≤ –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")


def create_fix_script():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –∞–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    print(f"\n{Colors.BOLD}üõ†Ô∏è –°–û–ó–î–ê–ù–ò–ï –°–ö–†–ò–ü–¢–ê –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø{Colors.END}")

    fix_script = """#!/usr/bin/env python3
# auto_fix.py - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
import os
import subprocess
import sys

def install_dependencies():
    deps = ["aiogram==3.3.0", "aiohttp", "aiosqlite", "python-dotenv", "psutil"]
    for dep in deps:
        subprocess.check_call([sys.executable, "-m", "pip", "install", dep])

def create_directories():
    dirs = ["data", "logs", "handlers", "services", "utils", "database"]
    for d in dirs:
        os.makedirs(d, exist_ok=True)

def create_init_files():
    init_files = ["handlers/__init__.py", "services/__init__.py", "utils/__init__.py", "database/__init__.py"]
    for f in init_files:
        with open(f, "w") as file:
            file.write("# Auto-generated __init__.py\\n")

if __name__ == "__main__":
    print("üîß –ê–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ...")
    try:
        install_dependencies()
        create_directories()
        create_init_files()
        print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
"""

    with open("auto_fix.py", "w", encoding="utf-8") as f:
        f.write(fix_script)

    print_status("OK", "–°–æ–∑–¥–∞–Ω auto_fix.py")
    print("   –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python auto_fix.py")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    print(f"{Colors.BOLD}üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê CONTENT MANAGER BOT{Colors.END}")
    print("=" * 60)

    all_good = True

    # –ü—Ä–æ–≤–µ—Ä–∫–∏
    python_ok = check_python_version()
    files_ok, missing_files, _ = check_file_structure()
    deps_ok, missing_deps, _ = check_dependencies()
    config_ok, config_issues = check_configuration()
    imports_ok, import_errors = check_imports()
    db_ok = check_database()

    # –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    all_good = python_ok and files_ok and deps_ok and config_ok and imports_ok and db_ok

    print(f"\n{Colors.BOLD}üìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢{Colors.END}")
    print("=" * 60)

    if all_good:
        print_status("OK", "–í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´! –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É.")
        print(f"\n{Colors.GREEN}üöÄ –î–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: python main.py{Colors.END}")
    else:
        print_status("ERROR", "–û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´! –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.")

        # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é
        suggest_fixes(missing_files, missing_deps, config_issues, import_errors)

        # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        create_fix_script()

        print(f"\n{Colors.BLUE}üí° –ë–´–°–¢–†–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï:{Colors.END}")
        print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python auto_fix.py")
        print("2. –°–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª —Å —Ç–æ–∫–µ–Ω–∞–º–∏")
        print("3. –°–∫–∞—á–∞–π—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ñ–∞–π–ª—ã")
        print("4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python main.py")


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print(f"\n{Colors.YELLOW}‚èπ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞{Colors.END}")
    except Exception as e:
        print(f"\n{Colors.RED}üí• –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}{Colors.END}")