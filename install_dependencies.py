#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç —É–º–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è Content Manager Bot
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤–µ—Ä—Å–∏—é Python –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ –ø–∞–∫–µ—Ç—ã
"""

import sys
import subprocess
import platform


def get_python_version():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ Python"""
    return sys.version_info


def install_package(package_spec):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–¥–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞"""
    try:
        subprocess.check_call([sys.executable, "-m", "pip", "install", package_spec])
        return True
    except subprocess.CalledProcessError:
        return False


def main():
    print("ü§ñ Content Manager Bot - –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
    print("=" * 60)

    python_version = get_python_version()
    print(f"‚úÖ Python {python_version.major}.{python_version.minor}.{python_version.micro}")
    print(f"üñ•Ô∏è –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {platform.system()} {platform.machine()}")

    # –ë–∞–∑–æ–≤—ã–µ –ø–∞–∫–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–±–æ—Ç–∞—é—Ç –≤–µ–∑–¥–µ
    base_packages = [
        "aiogram==3.3.0",
        "aiofiles==23.2.1",
        "openai==1.3.8",
        "aiohttp==3.9.1",
        "requests==2.31.0",
        "beautifulsoup4==4.12.2",
        "lxml==4.9.3",
        "aiosqlite==0.19.0",
        "feedparser==6.0.10",
        "python-dateutil==2.8.2",
        "pytz==2023.3",
        "psutil>=5.9.0",
        "cryptography>=41.0.0",
        "python-dotenv==1.0.0",
        "Pillow>=10.0.0",
        "nltk>=3.8.1",
        "textblob>=0.17.1"
    ]

    # –ü–∞–∫–µ—Ç—ã, –∑–∞–≤–∏—Å—è—â–∏–µ –æ—Ç –≤–µ—Ä—Å–∏–∏ Python
    ml_packages = []

    if python_version >= (3, 13):
        print("\n‚ö†Ô∏è Python 3.13 –æ–±–Ω–∞—Ä—É–∂–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ –ø–∞–∫–µ—Ç–æ–≤")
        ml_packages = [
            "numpy",  # –ü–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è
            "scikit-learn",
            "pandas",
            "matplotlib"
        ]
        print("‚ö†Ô∏è TensorFlow –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç Python 3.13")
    elif python_version >= (3, 9):
        ml_packages = [
            "numpy>=1.24.0,<2.0.0",
            "scikit-learn>=1.3.0",
            "pandas>=2.0.0",
            "matplotlib>=3.7.0",
            "tensorflow==2.15.0"
        ]
    else:
        ml_packages = [
            "numpy>=1.21.0,<1.24.0",
            "scikit-learn>=1.0.0",
            "pandas>=1.3.0",
            "matplotlib>=3.5.0",
            "tensorflow==2.13.0"
        ]

    all_packages = base_packages + ml_packages

    print(f"\nüì¶ –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {len(all_packages)} –ø–∞–∫–µ—Ç–æ–≤")

    # –û–±–Ω–æ–≤–ª—è–µ–º pip
    print("\nüîÑ –û–±–Ω–æ–≤–ª—è—é pip...")
    subprocess.check_call([sys.executable, "-m", "pip", "install", "--upgrade", "pip"])

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞–∫–µ—Ç—ã
    success = 0
    failed = []

    for i, package in enumerate(all_packages, 1):
        print(f"\n[{i}/{len(all_packages)}] –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é {package}...")
        if install_package(package):
            success += 1
            print(f"‚úÖ {package} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        else:
            failed.append(package)
            print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ {package}")

            # –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
            if "numpy" in package and python_version >= (3, 13):
                print("üîÑ –ü—Ä–æ–±—É—é —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å numpy –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –≤–µ—Ä—Å–∏–∏...")
                if install_package("numpy"):
                    success += 1
                    failed.remove(package)
                    print("‚úÖ numpy —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–ø–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è)")

    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 60)
    print("üìä –û–¢–ß–ï–¢ –£–°–¢–ê–ù–û–í–ö–ò")
    print("=" * 60)
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {success}/{len(all_packages)}")

    if failed:
        print(f"\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ({len(failed)}):")
        for package in failed:
            print(f"   ‚Ä¢ {package}")

        print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print("1. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –ø–∞–∫–µ—Ç—ã –≤—Ä—É—á–Ω—É—é")
        print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –≤–∞—à–µ–π –≤–µ—Ä—Å–∏–µ–π Python")
        print("3. –û–±–Ω–æ–≤–∏—Ç–µ setuptools: pip install --upgrade setuptools wheel")
    else:
        print("\nüéâ –í—Å–µ –ø–∞–∫–µ—Ç—ã —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
        print("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
    print("\nüîç –ü—Ä–æ–≤–µ—Ä—è—é –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã...")
    critical_imports = [
        ("aiogram", "Telegram Framework"),
        ("openai", "OpenAI API"),
        ("aiosqlite", "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö")
    ]

    all_ok = True
    for module_name, description in critical_imports:
        try:
            __import__(module_name)
            print(f"‚úÖ {description} —Ä–∞–±–æ—Ç–∞–µ—Ç")
        except ImportError:
            print(f"‚ùå {description} –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            all_ok = False

    if all_ok:
        print("\n‚úÖ –í—Å–µ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç!")
        print("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python main.py")
    else:
        print("\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç")
        print("–ë–æ—Ç –º–æ–∂–µ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º")


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n‚ùå –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞")
        sys.exit(1)
    except Exception as e:
        print(f"\n\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        sys.exit(1)