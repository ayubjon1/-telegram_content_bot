import asyncio
import logging
import os
import sys
from pathlib import Path
from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode

# –ò–º–ø–æ—Ä—Ç—ã –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
from config import config, DATABASE_PATH
from database.models import DatabaseModels
from services.content_manager import ContentManager
from services.scheduler import PostScheduler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)


class ContentBot:
    def __init__(self):
        if not config.validate_config():
            print("‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏!")
            sys.exit(1)

        self.bot = Bot(
            token=config.BOT_TOKEN,
            default=DefaultBotProperties(parse_mode=ParseMode.HTML)
        )
        self.dp = Dispatcher()
        self.db = None
        self.content_manager = None
        self.scheduler = None

        print(f"‚úÖ –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å —Ç–æ–∫–µ–Ω–æ–º: {config.BOT_TOKEN[:10]}...")

    async def setup_database(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        os.makedirs(os.path.dirname(DATABASE_PATH), exist_ok=True)

        self.db = DatabaseModels(DATABASE_PATH)
        await self.db.init_database()

        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        default_sources = [
            ("Lenta.ru", "https://lenta.ru/rss", "rss", "–æ–±—â–µ–µ"),
            ("–†–ò–ê –ù–æ–≤–æ—Å—Ç–∏", "https://ria.ru/export/rss2/archive/index.xml", "rss", "–æ–±—â–µ–µ"),
            ("–¢–ê–°–°", "https://tass.ru/rss/v2.xml", "rss", "–æ–±—â–µ–µ"),
            ("–†–æ—Å—Å–∏–π—Å–∫–∞—è –≥–∞–∑–µ—Ç–∞", "https://rg.ru/xml/index.xml", "rss", "–æ–±—â–µ–µ"),
        ]

        try:
            for name, url, source_type, category in default_sources:
                await self.db.add_news_source(name, url, source_type, category)
        except:
            pass  # –ò—Å—Ç–æ—á–Ω–∏–∫–∏ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã

        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞")

    async def setup_services(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤"""
        self.content_manager = ContentManager(self.bot, self.db)
        self.scheduler = PostScheduler(self.content_manager)
        logger.info("–°–µ—Ä–≤–∏—Å—ã –≥–æ—Ç–æ–≤—ã")

    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        try:
            from handlers import admin
            self.dp.include_router(admin.router)

            # –î–æ–±–∞–≤–ª—è–µ–º middleware –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            @self.dp.message.middleware()
            async def db_middleware(handler, event, data):
                data['db'] = self.db
                data['content_manager'] = self.content_manager
                data['scheduler'] = self.scheduler
                return await handler(event, data)

            logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            print("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {str(e)}")
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {str(e)}")

    async def start_polling(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling"""
        try:
            await self.setup_database()
            await self.setup_services()
            self.setup_handlers()  # ‚Üê –í–ê–ñ–ù–û: —ç—Ç–∞ —Å—Ç—Ä–æ–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞!

            logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
            print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            print("üìù –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ bot.log")
            print("‚èπ –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")

            await self.bot.delete_webhook(drop_pending_updates=True)
            await self.dp.start_polling(self.bot)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {str(e)}")
            print(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        finally:
            await self.shutdown()

    async def shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""
        try:
            await self.bot.session.close()
            logger.info("–ë–æ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã: {str(e)}")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    bot = ContentBot()

    try:
        await bot.start_polling()
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
        print("\n‚èπ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")


if __name__ == "__main__":
    if not config.validate_config():
        print("‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏!")
        exit(1)

    print("üöÄ –ó–∞–ø—É—Å–∫ Content Manager Bot...")

    asyncio.run(main())