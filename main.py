# main.py - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –ë–ï–ó –û–®–ò–ë–û–ö –ò–ú–ü–û–†–¢–ê
import asyncio
import logging
import os
import sys
from pathlib import Path
from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.types import BotCommand

# –ò–º–ø–æ—Ä—Ç—ã –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
from config import config, DATABASE_PATH
from database.models import DatabaseModels
from services.content_manager import ContentManager
from services.scheduler import PostScheduler
from utils.monitoring import SmartMonitor

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)


class FixedContentBot:
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è Content Manager Bot –±–µ–∑ –æ—à–∏–±–æ–∫ –∏–º–ø–æ—Ä—Ç–∞"""

    def __init__(self):
        if not config.validate_config():
            print("‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏!")
            sys.exit(1)

        self.bot = Bot(
            token=config.BOT_TOKEN,
            default=DefaultBotProperties(parse_mode=ParseMode.HTML)
        )
        self.dp = Dispatcher()

        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.db = None
        self.content_manager = None
        self.scheduler = None
        self.monitor = None

        # –ò–ò –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ)
        self.smart_analyzer = None
        self.performance_tracker = None

        self.version = "3.0.1-fixed"
        self.startup_time = None

        print(f"ü§ñ Content Manager Bot v{self.version} - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è")
        print(f"‚úÖ –¢–æ–∫–µ–Ω: {config.BOT_TOKEN[:10]}...")

    async def setup_database(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        print("üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")

        os.makedirs(os.path.dirname(DATABASE_PATH), exist_ok=True)
        self.db = DatabaseModels(DATABASE_PATH)
        await self.db.init_database()

        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        default_sources = [
            ("Lenta.ru", "https://lenta.ru/rss", "rss", "–æ–±—â–µ–µ"),
            ("–†–ò–ê –ù–æ–≤–æ—Å—Ç–∏", "https://ria.ru/export/rss2/archive/index.xml", "rss", "–æ–±—â–µ–µ"),
            ("–¢–ê–°–°", "https://tass.ru/rss/v2.xml", "rss", "–æ–±—â–µ–µ"),
            ("–†–æ—Å—Å–∏–π—Å–∫–∞—è –≥–∞–∑–µ—Ç–∞", "https://rg.ru/xml/index.xml", "rss", "–æ–±—â–µ–µ"),
        ]

        for name, url, source_type, category in default_sources:
            try:
                await self.db.add_news_source(name, url, source_type, category)
            except:
                pass  # –ò—Å—Ç–æ—á–Ω–∏–∫–∏ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        default_settings = {
            'openai_model': 'gpt-4',
            'ai_temperature': '0.7',
            'ai_max_tokens': '800',
            'default_style': 'engaging',
            'max_posts_per_day': '20',
            'min_interval_minutes': '30'
        }

        for key, value in default_settings.items():
            try:
                existing = await self.db.get_setting(key)
                if not existing:
                    await self.db.set_setting(key, value)
            except:
                pass

        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")

    async def setup_optional_ai_components(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ò–ò –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ)"""
        print("üß† –ü–æ–ø—ã—Ç–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ò–ò-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")

        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        try:
            from services.smart_analyzer import SmartContentAnalyzer
            self.smart_analyzer = SmartContentAnalyzer(self.db)
            logger.info("‚úÖ –£–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω")
        except ImportError:
            logger.info("‚ÑπÔ∏è –£–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ")
            self.smart_analyzer = None
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –£–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            self.smart_analyzer = None

        try:
            from services.performance_tracker import PerformanceTracker
            self.performance_tracker = PerformanceTracker(self.db)
            logger.info("‚úÖ –¢—Ä–µ–∫–µ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω")
        except ImportError:
            logger.info("‚ÑπÔ∏è –¢—Ä–µ–∫–µ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ")
            self.performance_tracker = None
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –¢—Ä–µ–∫–µ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            self.performance_tracker = None

    async def setup_core_services(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        print("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...")

        # Content Manager
        self.content_manager = ContentManager(self.bot, self.db)

        # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        self.scheduler = PostScheduler(self.content_manager, self.db)

        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        self.monitor = SmartMonitor(self.db, self.scheduler)

        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        try:
            await self.scheduler.restore_jobs_from_db()
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")

        logger.info("‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –≥–æ—Ç–æ–≤—ã")

    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏"""
        print("üîß –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤...")

        handlers_loaded = []
        handlers_failed = []

        # –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ)
        try:
            from handlers import admin
            self.dp.include_router(admin.router)
            handlers_loaded.append("admin")
        except ImportError as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω handlers/admin.py: {e}")
            handlers_failed.append("admin")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ admin.py: {e}")
            handlers_failed.append("admin")

        # –ò–ò —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (–Ω–æ–≤—ã–π –º–æ–¥—É–ª—å)
        try:
            from handlers import ai_management
            self.dp.include_router(ai_management.router)
            handlers_loaded.append("ai_management")
        except ImportError:
            logger.info("‚ÑπÔ∏è ai_management.py –Ω–µ –Ω–∞–π–¥–µ–Ω - —Å–æ–∑–¥–∞–π—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª")
            handlers_failed.append("ai_management")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ai_management.py: {e}")
            handlers_failed.append("ai_management")

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ)
        optional_handlers = [
            ("channels", "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏"),
            ("news", "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç—è–º–∏"),
            ("settings", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
            ("ai_control", "–ò–ò –ø–∞–Ω–µ–ª—å"),
            ("analytics_pro", "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞")
        ]

        for handler_name, description in optional_handlers:
            try:
                handler_module = __import__(f"handlers.{handler_name}", fromlist=[handler_name])
                self.dp.include_router(handler_module.router)
                handlers_loaded.append(handler_name)
            except ImportError:
                logger.info(f"‚ÑπÔ∏è {handler_name}.py –Ω–µ –Ω–∞–π–¥–µ–Ω - {description} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
                handlers_failed.append(handler_name)
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {handler_name}.py: {e}")
                handlers_failed.append(handler_name)

        # Middleware –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        @self.dp.message.middleware()
        async def dependencies_middleware(handler, event, data):
            data['db'] = self.db
            data['content_manager'] = self.content_manager
            data['scheduler'] = self.scheduler
            data['monitor'] = self.monitor
            data['smart_analyzer'] = self.smart_analyzer
            data['performance_tracker'] = self.performance_tracker
            return await handler(event, data)

        @self.dp.callback_query.middleware()
        async def callback_dependencies_middleware(handler, event, data):
            data['db'] = self.db
            data['content_manager'] = self.content_manager
            data['scheduler'] = self.scheduler
            data['monitor'] = self.monitor
            data['smart_analyzer'] = self.smart_analyzer
            data['performance_tracker'] = self.performance_tracker
            return await handler(event, data)

        # –û—Ç—á–µ—Ç –æ –∑–∞–≥—Ä—É–∑–∫–µ
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏: {', '.join(handlers_loaded)}")
        if handlers_failed:
            print(f"‚ö†Ô∏è –ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {', '.join(handlers_failed)}")

        logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã: {len(handlers_loaded)}")

    async def setup_bot_commands(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
        commands = [
            BotCommand(command="start", description="üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"),
            BotCommand(command="help", description="‚ùì –°–ø—Ä–∞–≤–∫–∞"),
            BotCommand(command="status", description="üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"),
            BotCommand(command="ai", description="ü§ñ –ò–ò-–ø–∞–Ω–µ–ª—å (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)"),
            BotCommand(command="health_check", description="üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞"),
        ]

        await self.bot.set_my_commands(commands)
        logger.info("‚úÖ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")

    async def start_background_services(self):
        """–ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        print("üîÑ –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...")

        # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        try:
            self.scheduler.start()
            logger.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")

        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ (–Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π)
        try:
            asyncio.create_task(self.monitor.start_monitoring())
            logger.info("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")

        # –¢—Ä–µ–∫–µ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
        if self.performance_tracker:
            try:
                asyncio.create_task(self.performance_tracker.start_tracking())
                logger.info("‚úÖ –¢—Ä–µ–∫–µ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–ø—É—â–µ–Ω")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç—Ä–µ–∫–µ—Ä–∞: {e}")

    async def send_startup_notification(self):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ"""
        try:
            ai_features = []
            if self.smart_analyzer:
                ai_features.append("üß† Smart Analyzer")
            if self.performance_tracker:
                ai_features.append("üìä Performance Tracker")

            ai_status = f"—Å {len(ai_features)} –ò–ò-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏" if ai_features else "–±–∞–∑–æ–≤–∞—è –≤–µ—Ä—Å–∏—è"

            startup_message = f"""
üöÄ <b>Content Manager Bot v{self.version} –∑–∞–ø—É—â–µ–Ω!</b>

‚úÖ <b>–°—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:</b>
‚Ä¢ üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: {'‚úÖ' if self.scheduler.running else '‚ùå'}
‚Ä¢ üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: {'‚úÖ' if self.monitor.running else '‚ùå'}
‚Ä¢ ü§ñ –ò–ò-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: {len(ai_features)}

üõ†Ô∏è <b>–í–µ—Ä—Å–∏—è:</b> {ai_status}

üìä <b>–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!</b>
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.
            """

            await self.bot.send_message(
                chat_id=config.ADMIN_ID,
                text=startup_message,
                parse_mode="HTML"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

    async def start_polling(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            self.startup_time = asyncio.get_event_loop().time()

            # –ü–æ—ç—Ç–∞–ø–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
            await self.setup_database()
            await self.setup_optional_ai_components()
            await self.setup_core_services()
            await self.setup_bot_commands()
            self.setup_handlers()
            await self.start_background_services()

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ò–ò
            ai_components = []
            if self.smart_analyzer:
                ai_components.append("üß† Smart Analyzer")
            if self.performance_tracker:
                ai_components.append("üìä Performance Tracker")

            ai_status = f"—Å {len(ai_components)} –ò–ò-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏" if ai_components else "–±–∞–∑–æ–≤–∞—è –≤–µ—Ä—Å–∏—è"

            print("\n" + "=" * 60)
            print(f"ü§ñ Content Manager Bot v{self.version}")
            print("=" * 60)
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω {ai_status}")
            print("üìù –õ–æ–≥–∏: bot.log")
            print("üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫:", "–∞–∫—Ç–∏–≤–µ–Ω" if self.scheduler.running else "–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω")
            print("üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:", "–∞–∫—Ç–∏–≤–µ–Ω" if self.monitor.running else "–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω")

            if ai_components:
                print("üß† –ò–ò-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:")
                for component in ai_components:
                    print(f"   {component}")
            else:
                print("‚ÑπÔ∏è –ò–ò-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)")

            print("\nüí° –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
            print("   /start - –∑–∞–ø—É—Å–∫ –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            print("   /status - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã")
            print("   /health_check - –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞")
            if ai_components:
                print("   /ai - –ò–ò-–ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")

            print(f"\n‚èπ –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: Ctrl+C")
            print("=" * 60)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            await self.send_startup_notification()

            logger.info(f"üöÄ –ë–æ—Ç v{self.version} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")

            # –ó–∞–ø—É—Å–∫–∞–µ–º polling
            await self.bot.delete_webhook(drop_pending_updates=True)
            await self.dp.start_polling(self.bot)

        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {str(e)}")
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
            raise
        finally:
            await self.shutdown()

    async def shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""
        try:
            print("\nüîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            if self.scheduler:
                try:
                    await self.scheduler._save_jobs_to_db()
                    self.scheduler.stop()
                    logger.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")

            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            if self.monitor:
                try:
                    await self.monitor.stop_monitoring()
                    logger.info("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")

            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç—Ä–µ–∫–µ—Ä
            if self.performance_tracker:
                try:
                    await self.performance_tracker.stop_tracking()
                    logger.info("‚úÖ –¢—Ä–µ–∫–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç—Ä–µ–∫–µ—Ä–∞: {e}")

            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±–æ—Ç–∞
            await self.bot.session.close()

            print("‚úÖ –ë–æ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")
            logger.info("‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: {str(e)}")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    bot = FixedContentBot()

    try:
        await bot.start_polling()
    except KeyboardInterrupt:
        logger.info("üì¥ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        print("\n‚èπ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")


if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ Content Manager Bot v3.0.1 - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è")
    print("üîß –í–µ—Ä—Å–∏—è –±–µ–∑ –æ—à–∏–±–æ–∫ –∏–º–ø–æ—Ä—Ç–∞")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    if not config.validate_config():
        print("‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏!")
        print("   –°–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª —Å BOT_TOKEN, OPENAI_API_KEY, ADMIN_ID")
        sys.exit(1)

    # –ó–∞–ø—É—Å–∫–∞–µ–º
    try:
        asyncio.run(main())
    except Exception as e:
        print(f"üí• –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        sys.exit(1)