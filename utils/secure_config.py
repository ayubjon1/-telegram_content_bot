import os
import json
import base64
import hashlib
from pathlib import Path
from cryptography.fernet import Fernet
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
import logging

logger = logging.getLogger(__name__)


class SecureConfigManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π"""

    def __init__(self, config_file: str = "config.encrypted", password: str = None):
        self.config_file = config_file
        self.password = password or os.getenv('CONFIG_PASSWORD')
        self.salt_file = f"{config_file}.salt"

    def _generate_key(self, password: str, salt: bytes) -> bytes:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –∏–∑ –ø–∞—Ä–æ–ª—è"""
        password_bytes = password.encode()
        kdf = PBKDF2HMAC(
            algorithm=hashes.SHA256(),
            length=32,
            salt=salt,
            iterations=100000,
        )
        key = base64.urlsafe_b64encode(kdf.derive(password_bytes))
        return key

    def _get_or_create_salt(self) -> bytes:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–ª–∏"""
        salt_path = Path(self.salt_file)

        if salt_path.exists():
            with open(salt_path, 'rb') as f:
                return f.read()
        else:
            salt = os.urandom(16)
            with open(salt_path, 'wb') as f:
                f.write(salt)
            return salt

    def encrypt_config(self, config_data: dict, password: str) -> bool:
        """–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–ª—å –∏ –∫–ª—é—á
            salt = self._get_or_create_salt()
            key = self._generate_key(password, salt)
            fernet = Fernet(key)

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥ –≤ JSON –∏ —à–∏—Ñ—Ä—É–µ–º
            json_data = json.dumps(config_data, indent=2)
            encrypted_data = fernet.encrypt(json_data.encode())

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            with open(self.config_file, 'wb') as f:
                f.write(encrypted_data)

            logger.info(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {self.config_file}")
            return True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {str(e)}")
            return False

    def decrypt_config(self, password: str = None) -> dict:
        """–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        password = password or self.password

        if not password:
            raise ValueError("–ü–∞—Ä–æ–ª—å –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –Ω–µ —É–∫–∞–∑–∞–Ω")

        if not Path(self.config_file).exists():
            raise FileNotFoundError(f"–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {self.config_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")

        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–ª—å –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á
            salt = self._get_or_create_salt()
            key = self._generate_key(password, salt)
            fernet = Fernet(key)

            # –ß–∏—Ç–∞–µ–º –∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            with open(self.config_file, 'rb') as f:
                encrypted_data = f.read()

            decrypted_data = fernet.decrypt(encrypted_data)
            config_data = json.loads(decrypted_data.decode())

            logger.info("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–∞")
            return config_data

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {str(e)}")
            raise

    def create_encrypted_config_from_env(self, password: str):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        config_data = {
            "BOT_TOKEN": os.getenv('BOT_TOKEN'),
            "OPENAI_API_KEY": os.getenv('OPENAI_API_KEY'),
            "ADMIN_ID": int(os.getenv('ADMIN_ID', 0)),
            "NEWS_API_KEY": os.getenv('NEWS_API_KEY', ''),
            "RSS_FEEDS": os.getenv('RSS_FEEDS', '').split(',') if os.getenv('RSS_FEEDS') else [],
            "DATABASE_PATH": os.getenv('DATABASE_PATH', 'data/bot.db'),
            "OPENAI_MODEL": os.getenv('OPENAI_MODEL', 'gpt-4'),
            "MAX_TOKENS": int(os.getenv('OPENAI_MAX_TOKENS', 800)),
            "TEMPERATURE": float(os.getenv('OPENAI_TEMPERATURE', 0.7))
        }

        return self.encrypt_config(config_data, password)


class ConfigSetup:
    """–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""

    @staticmethod
    def setup_config_interactive():
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Content Manager Bot")
        print("=" * 50)

        config_data = {}

        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
        print("\nüìù –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
        config_data['BOT_TOKEN'] = input("Telegram Bot Token: ").strip()
        config_data['OPENAI_API_KEY'] = input("OpenAI API Key: ").strip()
        config_data['ADMIN_ID'] = int(input("–í–∞—à Telegram ID: ").strip())

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        print("\n‚öôÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
        config_data['NEWS_API_KEY'] = input("News API Key (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ): ").strip()

        # RSS –ª–µ–Ω—Ç—ã
        print("\nüì∞ RSS –∏—Å—Ç–æ—á–Ω–∏–∫–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):")
        rss_input = input("RSS –ª–µ–Ω—Ç—ã (Enter –¥–ª—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é): ").strip()
        if rss_input:
            config_data['RSS_FEEDS'] = [url.strip() for url in rss_input.split(',')]
        else:
            config_data['RSS_FEEDS'] = [
                "https://lenta.ru/rss",
                "https://ria.ru/export/rss2/archive/index.xml",
                "https://tass.ru/rss/v2.xml"
            ]

        # OpenAI –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        print("\nü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ OpenAI:")
        config_data['OPENAI_MODEL'] = input("–ú–æ–¥–µ–ª—å OpenAI (gpt-4): ").strip() or "gpt-4"
        config_data['MAX_TOKENS'] = int(input("–ú–∞–∫—Å–∏–º—É–º —Ç–æ–∫–µ–Ω–æ–≤ (800): ").strip() or "800")
        config_data['TEMPERATURE'] = float(input("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (0.7): ").strip() or "0.7")

        # –í—ã–±–æ—Ä —Ç–∏–ø–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        print("\nüíæ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:")
        print("1. .env —Ñ–∞–π–ª (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)")
        print("2. config.json")
        print("3. –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª")

        choice = input("–í–∞—à –≤—ã–±–æ—Ä (1-3): ").strip()

        if choice == "1":
            ConfigSetup._save_to_env(config_data)
        elif choice == "2":
            ConfigSetup._save_to_json(config_data)
        elif choice == "3":
            password = input("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: ")
            ConfigSetup._save_encrypted(config_data, password)
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä, —Å–æ—Ö—Ä–∞–Ω—è—é –≤ .env")
            ConfigSetup._save_to_env(config_data)

        # –°–æ–∑–¥–∞–µ–º .gitignore
        ConfigSetup._create_gitignore()

        print("\n‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print("üöÄ –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å: python main.py")

    @staticmethod
    def _save_to_env(config_data: dict):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ .env —Ñ–∞–π–ª"""
        env_content = f"""# Content Manager Bot Configuration
# –ù–ï –î–û–ë–ê–í–õ–Ø–¢–¨ –í GIT!

BOT_TOKEN={config_data['BOT_TOKEN']}
OPENAI_API_KEY={config_data['OPENAI_API_KEY']}
ADMIN_ID={config_data['ADMIN_ID']}
NEWS_API_KEY={config_data['NEWS_API_KEY']}
RSS_FEEDS={','.join(config_data['RSS_FEEDS'])}
OPENAI_MODEL={config_data['OPENAI_MODEL']}
OPENAI_MAX_TOKENS={config_data['MAX_TOKENS']}
OPENAI_TEMPERATURE={config_data['TEMPERATURE']}
"""

        with open('.env', 'w', encoding='utf-8') as f:
            f.write(env_content)

        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ .env")

    @staticmethod
    def _save_to_json(config_data: dict):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ JSON —Ñ–∞–π–ª"""
        with open('config.json', 'w', encoding='utf-8') as f:
            json.dump(config_data, f, indent=2, ensure_ascii=False)

        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ config.json")

    @staticmethod
    def _save_encrypted(config_data: dict, password: str):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ"""
        secure_config = SecureConfigManager()
        if secure_config.encrypt_config(config_data, password):
            print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è, —Å–æ—Ö—Ä–∞–Ω—è—é –≤ .env")
            ConfigSetup._save_to_env(config_data)

    @staticmethod
    def _create_gitignore():
        """–°–æ–∑–¥–∞–Ω–∏–µ .gitignore —Ñ–∞–π–ª–∞"""
        gitignore_content = """# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
.env
config.json
config.encrypted
config.encrypted.salt
keys.py

# –õ–æ–≥–∏
*.log
logs/

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
data/*.db
data/*.sqlite

# Python
__pycache__/
*.pyc
*.pyo
*.pyd
.Python
*.so
.pytest_cache/

# IDE
.vscode/
.idea/
*.swp
*.swo

# OS
.DS_Store
Thumbs.db
"""

        with open('.gitignore', 'w', encoding='utf-8') as f:
            f.write(gitignore_content)

        print("‚úÖ –°–æ–∑–¥–∞–Ω .gitignore —Ñ–∞–π–ª")


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    ConfigSetup.setup_config_interactive()