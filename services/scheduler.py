# services/scheduler.py - –ü–û–õ–ù–ê–Ø –ó–ê–ú–ï–ù–ê —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞
import asyncio
import json
import logging
from datetime import datetime, timedelta
from typing import List, Dict, Callable, Optional, Any
from dataclasses import dataclass, asdict
from enum import Enum
import uuid

logger = logging.getLogger(__name__)


class JobType(Enum):
    DAILY_POST = "daily_post"
    INTERVAL_POST = "interval_post"
    CUSTOM = "custom"


class JobStatus(Enum):
    PENDING = "pending"
    RUNNING = "running"
    COMPLETED = "completed"
    FAILED = "failed"
    CANCELLED = "cancelled"


@dataclass
class ScheduledJob:
    """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    id: str
    name: str
    job_type: JobType
    func_name: str
    func_args: Dict[str, Any]
    next_run: datetime
    interval_seconds: Optional[int] = None
    max_retries: int = 3
    is_active: bool = True
    current_retries: int = 0
    status: JobStatus = JobStatus.PENDING


class PostScheduler:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å –±–∞–∑–æ–≤–æ–π –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å—é"""

    def __init__(self, content_manager, db=None):
        self.content_manager = content_manager
        self.db = db
        self.running = False
        self.jobs: Dict[str, ScheduledJob] = {}
        self._scheduler_task: Optional[asyncio.Task] = None

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        self._function_registry = {
            'process_and_publish_news': self.content_manager.process_and_publish_news,
        }

        logger.info("‚úÖ –ù–æ–≤—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def start(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        if self.running:
            logger.warning("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return

        self.running = True
        self._scheduler_task = asyncio.create_task(self._scheduler_loop())
        logger.info("üöÄ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π")

    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        self.running = False
        if self._scheduler_task:
            self._scheduler_task.cancel()
        logger.info("‚èπ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    def schedule_daily_posts(self, times: List[str]) -> List[str]:
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤"""
        job_ids = []

        for time_str in times:
            try:
                hour, minute = map(int, time_str.split(':'))

                # –í—ã—á–∏—Å–ª—è–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞
                now = datetime.now()
                next_run = datetime.combine(now.date(), datetime.min.time().replace(hour=hour, minute=minute))

                # –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ —Å–µ–≥–æ–¥–Ω—è, –ø–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞
                if next_run <= now:
                    next_run += timedelta(days=1)

                job_id = str(uuid.uuid4())

                job = ScheduledJob(
                    id=job_id,
                    name=f"–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –≤ {time_str}",
                    job_type=JobType.DAILY_POST,
                    func_name='process_and_publish_news',
                    func_args={},
                    next_run=next_run,
                    interval_seconds=24 * 3600  # 24 —á–∞—Å–∞
                )

                self.jobs[job_id] = job
                job_ids.append(job_id)

                logger.info(f"üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –≤ {time_str} (ID: {job_id[:8]})")

            except ValueError as e:
                logger.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ {time_str}: {e}")

        return job_ids

    def schedule_interval_posts(self, interval_hours: int) -> str:
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã"""
        job_id = str(uuid.uuid4())
        interval_seconds = interval_hours * 3600

        job = ScheduledJob(
            id=job_id,
            name=f"–ü—É–±–ª–∏–∫–∞—Ü–∏—è –∫–∞–∂–¥—ã–µ {interval_hours} —á",
            job_type=JobType.INTERVAL_POST,
            func_name='process_and_publish_news',
            func_args={},
            next_run=datetime.now() + timedelta(hours=interval_hours),
            interval_seconds=interval_seconds
        )

        self.jobs[job_id] = job
        logger.info(f"‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—è –∫–∞–∂–¥—ã–µ {interval_hours} —á–∞—Å–æ–≤ (ID: {job_id[:8]})")

        return job_id

    def get_scheduled_jobs(self) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á"""
        return [
            {
                'id': job.id[:8] + '...',  # –ö–æ—Ä–æ—Ç–∫–∏–π ID –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                'name': job.name,
                'type': job.job_type.value,
                'next_run': job.next_run.isoformat() if job.next_run else None,
                'status': job.status.value,
                'active': job.is_active
            }
            for job in self.jobs.values()
        ]

    def cancel_job(self, job_id: str) -> bool:
        """–û—Ç–º–µ–Ω–∞ –∑–∞–¥–∞—á–∏"""
        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∫–∞–∫ –ø–æ–ª–Ω—ã–π ID, —Ç–∞–∫ –∏ –∫–æ—Ä–æ—Ç–∫–∏–π
        matching_jobs = [jid for jid in self.jobs.keys() if jid.startswith(job_id) or jid == job_id]

        if matching_jobs:
            full_job_id = matching_jobs[0]
            self.jobs[full_job_id].status = JobStatus.CANCELLED
            self.jobs[full_job_id].is_active = False
            logger.info(f"‚ùå –ó–∞–¥–∞—á–∞ {full_job_id[:8]} –æ—Ç–º–µ–Ω–µ–Ω–∞")
            return True
        return False

    async def _scheduler_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        logger.info("üîÑ –ó–∞–ø—É—â–µ–Ω –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞")

        while self.running:
            try:
                now = datetime.now()

                # –ù–∞—Ö–æ–¥–∏–º –∑–∞–¥–∞—á–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                jobs_to_run = [
                    job for job in self.jobs.values()
                    if (job.status == JobStatus.PENDING and
                        job.is_active and
                        job.next_run <= now)
                ]

                # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á–∏
                for job in jobs_to_run:
                    asyncio.create_task(self._execute_job(job))

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
                if now.minute % 10 == 0 and now.second < 30:
                    await self._save_jobs_to_db()

                await asyncio.sleep(30)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
                await asyncio.sleep(60)

    async def _execute_job(self, job: ScheduledJob):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
        job.status = JobStatus.RUNNING
        start_time = datetime.now()

        try:
            logger.info(f"‚ö° –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∑–∞–¥–∞—á–∞: {job.name}")

            # –ü–æ–ª—É—á–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
            if job.func_name not in self._function_registry:
                raise ValueError(f"–§—É–Ω–∫—Ü–∏—è {job.func_name} –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞")

            func = self._function_registry[job.func_name]

            # –í—ã–ø–æ–ª–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é
            if asyncio.iscoroutinefunction(func):
                await func(**job.func_args)
            else:
                await asyncio.get_event_loop().run_in_executor(None, lambda: func(**job.func_args))

            # –£—Å–ø–µ—à–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            job.status = JobStatus.COMPLETED
            job.current_retries = 0

            duration = (datetime.now() - start_time).total_seconds()
            logger.info(f"‚úÖ –ó–∞–¥–∞—á–∞ {job.name} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∑–∞ {duration:.1f}—Å")

        except Exception as e:
            job.current_retries += 1

            if job.current_retries < job.max_retries:
                job.status = JobStatus.PENDING
                job.next_run = datetime.now() + timedelta(minutes=5)  # Retry —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç
                logger.warning(f"‚ö†Ô∏è –ó–∞–¥–∞—á–∞ {job.name} –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å, –ø–æ–ø—ã—Ç–∫–∞ {job.current_retries}/{job.max_retries}")
            else:
                job.status = JobStatus.FAILED
                job.is_active = False
                logger.error(f"‚ùå –ó–∞–¥–∞—á–∞ {job.name} –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ: {e}")

        finally:
            # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫ –¥–ª—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –∑–∞–¥–∞—á
            if job.status == JobStatus.COMPLETED and job.interval_seconds and job.is_active:
                job.next_run = datetime.now() + timedelta(seconds=job.interval_seconds)
                job.status = JobStatus.PENDING
                logger.info(f"üìÖ –°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ {job.name}: {job.next_run.strftime('%H:%M %d.%m')}")

    async def _save_jobs_to_db(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á –≤ –ë–î"""
        if not self.db:
            return

        try:
            jobs_data = {}
            for job_id, job in self.jobs.items():
                if job.status not in [JobStatus.CANCELLED, JobStatus.FAILED]:
                    jobs_data[job_id] = {
                        'id': job.id,
                        'name': job.name,
                        'job_type': job.job_type.value,
                        'func_name': job.func_name,
                        'func_args': job.func_args,
                        'next_run': job.next_run.isoformat() if job.next_run else None,
                        'interval_seconds': job.interval_seconds,
                        'max_retries': job.max_retries,
                        'is_active': job.is_active,
                        'current_retries': job.current_retries,
                        'status': job.status.value
                    }

            await self.db.set_setting('scheduler_jobs', json.dumps(jobs_data))
            logger.debug(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(jobs_data)} –∑–∞–¥–∞—á –≤ –ë–î")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á: {e}")

    async def restore_jobs_from_db(self):
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á –∏–∑ –ë–î"""
        if not self.db:
            return

        try:
            jobs_json = await self.db.get_setting('scheduler_jobs')
            if not jobs_json:
                logger.info("üìù –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –≤ –ë–î")
                return

            jobs_data = json.loads(jobs_json)
            restored_count = 0

            for job_id, job_data in jobs_data.items():
                try:
                    job = ScheduledJob(
                        id=job_data['id'],
                        name=job_data['name'],
                        job_type=JobType(job_data['job_type']),
                        func_name=job_data['func_name'],
                        func_args=job_data['func_args'],
                        next_run=datetime.fromisoformat(job_data['next_run']) if job_data['next_run'] else None,
                        interval_seconds=job_data.get('interval_seconds'),
                        max_retries=job_data['max_retries'],
                        is_active=job_data['is_active'],
                        current_retries=job_data['current_retries'],
                        status=JobStatus(job_data['status'])
                    )

                    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å RUNNING –∑–∞–¥–∞—á –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ
                    if job.status == JobStatus.RUNNING:
                        job.status = JobStatus.PENDING

                    self.jobs[job_id] = job
                    restored_count += 1

                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ {job_id}: {e}")

            logger.info(f"üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {restored_count} –∑–∞–¥–∞—á –∏–∑ –ë–î")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á –∏–∑ –ë–î: {e}")

    def get_scheduler_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        active_jobs = [job for job in self.jobs.values() if job.is_active]
        pending_jobs = [job for job in active_jobs if job.status == JobStatus.PENDING]

        next_job = None
        if pending_jobs:
            next_job = min(pending_jobs, key=lambda j: j.next_run)

        return {
            'running': self.running,
            'total_jobs': len(self.jobs),
            'active_jobs': len(active_jobs),
            'pending_jobs': len(pending_jobs),
            'next_execution': next_job.next_run.isoformat() if next_job else None,
            'next_job_name': next_job.name if next_job else None
        }