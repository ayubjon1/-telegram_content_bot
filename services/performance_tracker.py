# services/performance_tracker.py - –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Ç—Ä–µ–∫–µ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
import asyncio
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple
from collections import defaultdict
import json
import statistics

logger = logging.getLogger(__name__)


class PerformanceTracker:
    """–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏ –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""

    def __init__(self, db, bot=None):
        self.db = db
        self.bot = bot
        self.tracking_active = False

        # –ö—ç—à –¥–ª—è –º–µ—Ç—Ä–∏–∫
        self.metrics_cache = defaultdict(dict)
        self.performance_history = []

        # –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self.update_intervals = {
            'realtime': 60,  # 1 –º–∏–Ω—É—Ç–∞
            'hourly': 3600,  # 1 —á–∞—Å
            'daily': 86400,  # 24 —á–∞—Å–∞
            'weekly': 604800  # 7 –¥–Ω–µ–π
        }

        logger.info("üìä –¢—Ä–µ–∫–µ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    async def start_tracking(self):
        """–ó–∞–ø—É—Å–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        if self.tracking_active:
            return

        self.tracking_active = True

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        tasks = [
            asyncio.create_task(self._track_realtime_metrics()),
            asyncio.create_task(self._calculate_hourly_stats()),
            asyncio.create_task(self._generate_daily_reports()),
            asyncio.create_task(self._analyze_trends())
        ]

        logger.info("üöÄ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–ø—É—â–µ–Ω–æ")

        try:
            await asyncio.gather(*tasks)
        except asyncio.CancelledError:
            logger.info("‚èπ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

    async def stop_tracking(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"""
        self.tracking_active = False
        logger.info("‚èπ –¢—Ä–µ–∫–µ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    async def track_post_performance(self, post_id: str, channel_id: str,
                                     content: str, timestamp: datetime) -> Dict:
        """–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ—Å—Ç–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ Telegram
            metrics = await self._fetch_post_metrics(post_id, channel_id)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
            cache_key = f"{channel_id}_{post_id}"
            self.metrics_cache[cache_key] = {
                'post_id': post_id,
                'channel_id': channel_id,
                'content': content[:200],  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–≤—å—é
                'timestamp': timestamp,
                'metrics': metrics,
                'last_update': datetime.now()
            }

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            performance_analysis = await self._analyze_post_performance(
                metrics, content, timestamp
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            await self._save_performance_data(
                post_id, channel_id, metrics, performance_analysis
            )

            return {
                'metrics': metrics,
                'analysis': performance_analysis,
                'status': 'tracked'
            }

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å—Ç–∞ {post_id}: {e}")
            return {'status': 'error', 'error': str(e)}

    async def _fetch_post_metrics(self, post_id: str, channel_id: str) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø–æ—Å—Ç–∞ –∏–∑ Telegram"""
        try:
            if not self.bot:
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                return {
                    'views': 150,
                    'likes': 12,
                    'shares': 3,
                    'comments': 5,
                    'engagement_rate': 8.0
                }

            # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –∫–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ —á–µ—Ä–µ–∑ Telegram API
            # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
            return {
                'views': 150,
                'likes': 12,
                'shares': 3,
                'comments': 5,
                'engagement_rate': 8.0
            }

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫: {e}")
            return {}

    async def _analyze_post_performance(self, metrics: Dict, content: str,
                                        timestamp: datetime) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ—Å—Ç–∞"""
        # –ë–∞–∑–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
        performance_score = self._calculate_performance_score(metrics)

        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        historical_comparison = await self._compare_with_history(metrics)

        # –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        time_analysis = self._analyze_publication_time(timestamp, metrics)

        # –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        content_factors = self._analyze_content_factors(content, metrics)

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        performance_category = self._categorize_performance(performance_score)

        return {
            'score': performance_score,
            'category': performance_category,
            'historical_comparison': historical_comparison,
            'time_analysis': time_analysis,
            'content_factors': content_factors,
            'insights': self._generate_insights(
                performance_score, historical_comparison,
                time_analysis, content_factors
            )
        }

    def _calculate_performance_score(self, metrics: Dict) -> float:
        """–†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ –±–∞–ª–ª–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        if not metrics:
            return 0.0

        views = metrics.get('views', 0)
        likes = metrics.get('likes', 0)
        shares = metrics.get('shares', 0)
        comments = metrics.get('comments', 0)

        if views == 0:
            return 0.0

        # –í–µ—Å–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
        engagement_rate = ((likes + shares * 2 + comments * 3) / views) * 100

        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å—á–µ—Ç –æ—Ç 0 –¥–æ 10
        if engagement_rate >= 20:
            score = 10.0
        elif engagement_rate >= 15:
            score = 9.0
        elif engagement_rate >= 10:
            score = 8.0
        elif engagement_rate >= 7:
            score = 7.0
        elif engagement_rate >= 5:
            score = 6.0
        elif engagement_rate >= 3:
            score = 5.0
        elif engagement_rate >= 2:
            score = 4.0
        elif engagement_rate >= 1:
            score = 3.0
        else:
            score = engagement_rate * 3  # –î–ª—è –æ—á–µ–Ω—å –Ω–∏–∑–∫–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π

        return round(score, 1)

    async def _compare_with_history(self, metrics: Dict) -> Dict:
        """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ä–µ–¥–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏
        historical_avg = await self._get_historical_averages()

        comparison = {}

        for metric_key in ['views', 'likes', 'shares', 'comments']:
            current_value = metrics.get(metric_key, 0)
            historical_value = historical_avg.get(metric_key, 0)

            if historical_value > 0:
                difference_percent = ((current_value - historical_value) / historical_value) * 100
                comparison[metric_key] = {
                    'current': current_value,
                    'average': historical_value,
                    'difference': round(difference_percent, 1),
                    'trend': 'up' if difference_percent > 0 else 'down' if difference_percent < 0 else 'stable'
                }
            else:
                comparison[metric_key] = {
                    'current': current_value,
                    'average': 0,
                    'difference': 0,
                    'trend': 'new'
                }

        return comparison

    async def _get_historical_averages(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–∏—Ö –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π"""
        if not self.performance_history:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            return {
                'views': 100,
                'likes': 5,
                'shares': 1,
                'comments': 2
            }

        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
        views_list = [item['metrics']['views'] for item in self.performance_history[-100:]
                      if 'views' in item.get('metrics', {})]
        likes_list = [item['metrics']['likes'] for item in self.performance_history[-100:]
                      if 'likes' in item.get('metrics', {})]
        shares_list = [item['metrics']['shares'] for item in self.performance_history[-100:]
                       if 'shares' in item.get('metrics', {})]
        comments_list = [item['metrics']['comments'] for item in self.performance_history[-100:]
                         if 'comments' in item.get('metrics', {})]

        return {
            'views': int(statistics.mean(views_list)) if views_list else 100,
            'likes': int(statistics.mean(likes_list)) if likes_list else 5,
            'shares': int(statistics.mean(shares_list)) if shares_list else 1,
            'comments': int(statistics.mean(comments_list)) if comments_list else 2
        }

    def _analyze_publication_time(self, timestamp: datetime, metrics: Dict) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
        hour = timestamp.hour
        day_of_week = timestamp.strftime('%A').lower()

        # –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞ (–Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—â–∏—Ö –ø—Ä–∞–∫—Ç–∏–∫)
        optimal_hours = {
            'morning': (7, 9),
            'lunch': (12, 13),
            'evening': (19, 21)
        }

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥ –¥–Ω—è
        if optimal_hours['morning'][0] <= hour <= optimal_hours['morning'][1]:
            time_period = 'morning'
            is_optimal = True
        elif optimal_hours['lunch'][0] <= hour <= optimal_hours['lunch'][1]:
            time_period = 'lunch'
            is_optimal = True
        elif optimal_hours['evening'][0] <= hour <= optimal_hours['evening'][1]:
            time_period = 'evening'
            is_optimal = True
        else:
            time_period = 'off-peak'
            is_optimal = False

        # –ê–Ω–∞–ª–∏–∑ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
        weekday_performance = {
            'monday': 0.9,
            'tuesday': 1.1,
            'wednesday': 1.1,
            'thursday': 1.0,
            'friday': 0.95,
            'saturday': 0.8,
            'sunday': 0.75
        }

        day_multiplier = weekday_performance.get(day_of_week, 1.0)

        return {
            'hour': hour,
            'day_of_week': day_of_week,
            'time_period': time_period,
            'is_optimal_time': is_optimal,
            'day_performance_multiplier': day_multiplier,
            'recommendation': self._get_time_recommendation(hour, day_of_week, metrics)
        }

    def _get_time_recommendation(self, hour: int, day: str, metrics: Dict) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
        if 7 <= hour <= 9:
            return "–û—Ç–ª–∏—á–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —É—Ç—Ä–µ–Ω–Ω–µ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏"
        elif 12 <= hour <= 13:
            return "–•–æ—Ä–æ—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –æ–±–µ–¥–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ—Ä—ã–≤–∞"
        elif 19 <= hour <= 21:
            return "–ü–∏–∫–æ–≤–æ–µ –≤–µ—á–µ—Ä–Ω–µ–µ –≤—Ä–µ–º—è"
        elif hour < 7:
            return "–°–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ—Å–ª–µ 7:00"
        elif hour > 22:
            return "–°–ª–∏—à–∫–æ–º –ø–æ–∑–¥–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ 22:00"
        else:
            return "–ù–µ —Å–∞–º–æ–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç—Ä–æ–º –∏–ª–∏ –≤–µ—á–µ—Ä–æ–º"

    def _analyze_content_factors(self, content: str, metrics: Dict) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞, –≤–ª–∏—è—é—â–∏—Ö –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"""
        factors = {
            'length': len(content),
            'has_emoji': bool(re.search(r'[^\w\s,]', content)),
            'has_hashtags': '#' in content,
            'has_question': '?' in content,
            'has_call_to_action': any(cta in content.lower() for cta in
                                      ['–ø–æ–¥–ø–∏—Å', '–ª–∞–π–∫', '–∫–æ–º–º–µ–Ω—Ç', '–ø–æ–¥–µ–ª–∏—Å—å']),
            'has_link': 'http' in content or 'www.' in content
        }

        # –û—Ü–µ–Ω–∫–∞ –≤–ª–∏—è–Ω–∏—è —Ñ–∞–∫—Ç–æ—Ä–æ–≤
        positive_factors = []
        negative_factors = []

        if factors['has_emoji']:
            positive_factors.append("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç–º–æ–¥–∑–∏ (+15% –∫ engagement)")
        if factors['has_hashtags']:
            positive_factors.append("–ù–∞–ª–∏—á–∏–µ —Ö–µ—à—Ç–µ–≥–æ–≤ (+10% –∫ –æ—Ö–≤–∞—Ç—É)")
        if factors['has_question']:
            positive_factors.append("–í–æ–ø—Ä–æ—Å –≤ —Ç–µ–∫—Å—Ç–µ (+25% –∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º)")
        if factors['has_call_to_action']:
            positive_factors.append("–ü—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é (+20% –∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏)")

        if factors['length'] > 500:
            negative_factors.append("–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (-10% –∫ –¥–æ—á–∏—Ç—ã–≤–∞–µ–º–æ—Å—Ç–∏)")
        if factors['length'] < 50:
            negative_factors.append("–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç (-15% –∫ —Ü–µ–Ω–Ω–æ—Å—Ç–∏)")
        if factors['has_link'] and metrics.get('views', 0) < 100:
            negative_factors.append("–°—Å—ã–ª–∫–∏ –º–æ–≥—É—Ç —Å–Ω–∏–∂–∞—Ç—å –æ—Ö–≤–∞—Ç (-20%)")

        return {
            'factors': factors,
            'positive_factors': positive_factors,
            'negative_factors': negative_factors,
            'content_score': len(positive_factors) - len(negative_factors) * 0.5
        }

    def _categorize_performance(self, score: float) -> str:
        """–ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        if score >= 9:
            return "üî• –í–∏—Ä—É—Å–Ω—ã–π"
        elif score >= 7:
            return "üéØ –û—Ç–ª–∏—á–Ω—ã–π"
        elif score >= 5:
            return "‚úÖ –•–æ—Ä–æ—à–∏–π"
        elif score >= 3:
            return "üìä –°—Ä–µ–¥–Ω–∏–π"
        elif score >= 1:
            return "‚ö†Ô∏è –ù–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–≥–æ"
        else:
            return "‚ùå –ü–ª–æ—Ö–æ–π"

    def _generate_insights(self, score: float, historical: Dict,
                           time_analysis: Dict, content_factors: Dict) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω—Å–∞–π—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞"""
        insights = []

        # –ò–Ω—Å–∞–π—Ç—ã –ø–æ –æ–±—â–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        if score >= 8:
            insights.append("üéâ –ü–æ—Å—Ç –ø–æ–∫–∞–∑–∞–ª –≤—ã–¥–∞—é—â–∏–µ—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã!")
        elif score >= 6:
            insights.append("üëç –ü–æ—Å—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ö–æ—Ä–æ—à–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ")
        elif score < 4:
            insights.append("üìà –ï—Å—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è")

        # –ò–Ω—Å–∞–π—Ç—ã –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –∏—Å—Ç–æ—Ä–∏–µ–π
        for metric, data in historical.items():
            if data['difference'] > 50:
                insights.append(f"üöÄ {metric.capitalize()} –≤—ã—Ä–æ—Å–ª–∏ –Ω–∞ {data['difference']}%!")
            elif data['difference'] < -30:
                insights.append(f"üìâ {metric.capitalize()} —É–ø–∞–ª–∏ –Ω–∞ {abs(data['difference'])}%")

        # –ò–Ω—Å–∞–π—Ç—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        if not time_analysis['is_optimal_time']:
            insights.append("‚è∞ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤ –ø–∏–∫–æ–≤—ã–µ —á–∞—Å—ã (7-9, 12-13, 19-21)")

        # –ò–Ω—Å–∞–π—Ç—ã –ø–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É
        if len(content_factors['positive_factors']) > 3:
            insights.append("‚ú® –û—Ç–ª–∏—á–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞!")
        elif len(content_factors['negative_factors']) > 1:
            insights.append("üîß –ö–æ–Ω—Ç–µ–Ω—Ç –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å")

        return insights[:5]  # –ú–∞–∫—Å–∏–º—É–º 5 –∏–Ω—Å–∞–π—Ç–æ–≤

    async def _save_performance_data(self, post_id: str, channel_id: str,
                                     metrics: Dict, analysis: Dict):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        performance_data = {
            'post_id': post_id,
            'channel_id': channel_id,
            'timestamp': datetime.now().isoformat(),
            'metrics': metrics,
            'analysis': analysis
        }

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        self.performance_history.append(performance_data)

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
        if len(self.performance_history) > 1000:
            self.performance_history = self.performance_history[-1000:]

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        if self.db:
            try:
                await self.db.set_setting(
                    f'performance_{post_id}',
                    json.dumps(performance_data)
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")

    async def _track_realtime_metrics(self):
        """–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
        while self.tracking_active:
            try:
                # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
                for cache_key, data in list(self.metrics_cache.items()):
                    if datetime.now() - data['last_update'] < timedelta(hours=24):
                        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –ø–æ—Å—Ç–æ–≤ –º–ª–∞–¥—à–µ 24 —á–∞—Å–æ–≤
                        new_metrics = await self._fetch_post_metrics(
                            data['post_id'], data['channel_id']
                        )
                        data['metrics'] = new_metrics
                        data['last_update'] = datetime.now()

                await asyncio.sleep(self.update_intervals['realtime'])

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è realtime –º–µ—Ç—Ä–∏–∫: {e}")
                await asyncio.sleep(60)

    async def _calculate_hourly_stats(self):
        """–†–∞—Å—á–µ—Ç –ø–æ—á–∞—Å–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        while self.tracking_active:
            try:
                await asyncio.sleep(self.update_intervals['hourly'])

                # –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
                hourly_stats = await self._aggregate_hourly_data()

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                if self.db:
                    await self.db.set_setting(
                        f'hourly_stats_{datetime.now().strftime("%Y%m%d%H")}',
                        json.dumps(hourly_stats)
                    )

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –ø–æ—á–∞—Å–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

    async def _generate_daily_reports(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤"""
        while self.tracking_active:
            try:
                await asyncio.sleep(self.update_intervals['daily'])

                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –∑–∞ –¥–µ–Ω—å
                daily_report = await self.generate_daily_report()

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
                if self.db:
                    await self.db.set_setting(
                        f'daily_report_{datetime.now().strftime("%Y%m%d")}',
                        json.dumps(daily_report)
                    )

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
                if self.bot:
                    await self._send_daily_report_notification(daily_report)

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")

    async def _analyze_trends(self):
        """–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        while self.tracking_active:
            try:
                await asyncio.sleep(self.update_intervals['weekly'])

                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–¥—ã –∑–∞ –Ω–µ–¥–µ–ª—é
                trends = await self._calculate_weekly_trends()

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤
                if self.db:
                    await self.db.set_setting(
                        f'weekly_trends_{datetime.now().strftime("%Y%W")}',
                        json.dumps(trends)
                    )

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤: {e}")

    async def generate_daily_report(self) -> Dict:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        today = datetime.now().date()

        # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        today_data = [
            item for item in self.performance_history
            if datetime.fromisoformat(item['timestamp']).date() == today
        ]

        if not today_data:
            return {
                'date': str(today),
                'posts_count': 0,
                'message': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è'
            }

        # –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏
        total_views = sum(item['metrics'].get('views', 0) for item in today_data)
        total_likes = sum(item['metrics'].get('likes', 0) for item in today_data)
        total_shares = sum(item['metrics'].get('shares', 0) for item in today_data)
        total_comments = sum(item['metrics'].get('comments', 0) for item in today_data)

        # –°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        avg_views = total_views // len(today_data) if today_data else 0
        avg_engagement = ((total_likes + total_shares + total_comments) / total_views * 100) if total_views > 0 else 0

        # –õ—É—á—à–∏–π –∏ —Ö—É–¥—à–∏–π –ø–æ—Å—Ç—ã
        sorted_by_score = sorted(
            today_data,
            key=lambda x: x['analysis']['score'],
            reverse=True
        )

        best_post = sorted_by_score[0] if sorted_by_score else None
        worst_post = sorted_by_score[-1] if len(sorted_by_score) > 1 else None

        # –ò–Ω—Å–∞–π—Ç—ã –¥–Ω—è
        daily_insights = self._generate_daily_insights(today_data)

        return {
            'date': str(today),
            'posts_count': len(today_data),
            'total_metrics': {
                'views': total_views,
                'likes': total_likes,
                'shares': total_shares,
                'comments': total_comments
            },
            'average_metrics': {
                'views_per_post': avg_views,
                'engagement_rate': round(avg_engagement, 2)
            },
            'best_post': {
                'id': best_post['post_id'],
                'score': best_post['analysis']['score'],
                'content_preview': best_post.get('content', '')[:100]
            } if best_post else None,
            'worst_post': {
                'id': worst_post['post_id'],
                'score': worst_post['analysis']['score'],
                'content_preview': worst_post.get('content', '')[:100]
            } if worst_post else None,
            'insights': daily_insights,
            'recommendations': self._generate_daily_recommendations(today_data)
        }

    def _generate_daily_insights(self, today_data: List[Dict]) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω—Å–∞–π—Ç–æ–≤ –¥–Ω—è"""
        insights = []

        # –ê–Ω–∞–ª–∏–∑ –æ–±—â–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        avg_score = statistics.mean([item['analysis']['score'] for item in today_data])

        if avg_score >= 7:
            insights.append("üéâ –û—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å! –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –ø–æ—Å—Ç–æ–≤: {:.1f}/10".format(avg_score))
        elif avg_score >= 5:
            insights.append("‚úÖ –•–æ—Ä–æ—à–∏–π –¥–µ–Ω—å. –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {:.1f}/10".format(avg_score))
        else:
            insights.append("üìà –ï—Å—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –¥–ª—è —Ä–æ—Å—Ç–∞. –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {:.1f}/10".format(avg_score))

        # –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        optimal_times = sum(1 for item in today_data
                            if item['analysis']['time_analysis']['is_optimal_time'])

        if optimal_times < len(today_data) * 0.5:
            insights.append("‚è∞ –¢–æ–ª—å–∫–æ {}% –ø–æ—Å—Ç–æ–≤ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã –≤ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è".format(
                int(optimal_times / len(today_data) * 100)
            ))

        # –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        avg_positive_factors = statistics.mean([
            len(item['analysis']['content_factors']['positive_factors'])
            for item in today_data
        ])

        if avg_positive_factors >= 3:
            insights.append("‚ú® –û—Ç–ª–∏—á–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞!")
        elif avg_positive_factors < 2:
            insights.append("üîß –ö–æ–Ω—Ç–µ–Ω—Ç –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —ç–º–æ–¥–∑–∏, —Ö–µ—à—Ç–µ–≥–æ–≤ –∏ CTA")

        return insights

    def _generate_daily_recommendations(self, today_data: List[Dict]) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–Ω–µ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        recommendations = []

        # –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–∏
        suboptimal_times = [
            item for item in today_data
            if not item['analysis']['time_analysis']['is_optimal_time']
        ]

        if len(suboptimal_times) > len(today_data) * 0.3:
            recommendations.append(
                "üìÖ –ü–µ—Ä–µ–Ω–µ—Å–∏—Ç–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–∞ —É—Ç—Ä–æ (7-9) –∏–ª–∏ –≤–µ—á–µ—Ä (19-21)"
            )

        # –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        low_engagement = [
            item for item in today_data
            if item['analysis']['score'] < 5
        ]

        if low_engagement:
            recommendations.append(
                "üí° –î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –ø—Ä–∏–∑—ã–≤–æ–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é"
            )

        # –ê–Ω–∞–ª–∏–∑ —á–∞—Å—Ç–æ—Ç—ã
        if len(today_data) < 3:
            recommendations.append(
                "üìà –£–≤–µ–ª–∏—á—å—Ç–µ —á–∞—Å—Ç–æ—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–π –¥–æ 5-7 –≤ –¥–µ–Ω—å"
            )
        elif len(today_data) > 10:
            recommendations.append(
                "üìâ –°–Ω–∏–∑—å—Ç–µ —á–∞—Å—Ç–æ—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–π –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞"
            )

        return recommendations[:3]

    async def _aggregate_hourly_data(self) -> Dict:
        """–ê–≥—Ä–µ–≥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞ —á–∞—Å"""
        current_hour = datetime.now().replace(minute=0, second=0, microsecond=0)
        hour_ago = current_hour - timedelta(hours=1)

        # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
        hourly_data = [
            item for item in self.performance_history
            if hour_ago <= datetime.fromisoformat(item['timestamp']) < current_hour
        ]

        if not hourly_data:
            return {'hour': current_hour.isoformat(), 'posts': 0}

        return {
            'hour': current_hour.isoformat(),
            'posts': len(hourly_data),
            'total_views': sum(item['metrics'].get('views', 0) for item in hourly_data),
            'avg_score': statistics.mean([item['analysis']['score'] for item in hourly_data])
        }

    async def _calculate_weekly_trends(self) -> Dict:
        """–†–∞—Å—á–µ—Ç –Ω–µ–¥–µ–ª—å–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤"""
        # –î–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é
        week_ago = datetime.now() - timedelta(days=7)

        weekly_data = [
            item for item in self.performance_history
            if datetime.fromisoformat(item['timestamp']) > week_ago
        ]

        if not weekly_data:
            return {'message': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤'}

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–Ω—è–º
        daily_scores = defaultdict(list)
        for item in weekly_data:
            day = datetime.fromisoformat(item['timestamp']).date()
            daily_scores[day].append(item['analysis']['score'])

        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –±–∞–ª–ª—ã –ø–æ –¥–Ω—è–º
        daily_averages = {
            str(day): statistics.mean(scores)
            for day, scores in daily_scores.items()
        }

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç—Ä–µ–Ω–¥
        scores_list = list(daily_averages.values())
        if len(scores_list) >= 3:
            first_half = statistics.mean(scores_list[:len(scores_list) // 2])
            second_half = statistics.mean(scores_list[len(scores_list) // 2:])

            if second_half > first_half * 1.1:
                trend = "growing"
                trend_description = "üìà –†–∞—Å—Ç—É—â–∏–π —Ç—Ä–µ–Ω–¥"
            elif second_half < first_half * 0.9:
                trend = "declining"
                trend_description = "üìâ –°–Ω–∏–∂–∞—é—â–∏–π—Å—è —Ç—Ä–µ–Ω–¥"
            else:
                trend = "stable"
                trend_description = "‚û°Ô∏è –°—Ç–∞–±–∏–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥"
        else:
            trend = "insufficient_data"
            trend_description = "‚ùì –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö"

        return {
            'week_start': str(week_ago.date()),
            'week_end': str(datetime.now().date()),
            'daily_averages': daily_averages,
            'trend': trend,
            'trend_description': trend_description,
            'total_posts': len(weekly_data),
            'avg_weekly_score': statistics.mean([item['analysis']['score'] for item in weekly_data])
        }

    async def _send_daily_report_notification(self, report: Dict):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–Ω–µ–≤–Ω–æ–º –æ—Ç—á–µ—Ç–µ"""
        if not self.bot:
            return

        try:
            from config import ADMIN_ID

            message = f"""
üìä <b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏</b>

üìÖ <b>–î–∞—Ç–∞:</b> {report['date']}
üìù <b>–ü–æ—Å—Ç–æ–≤ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ:</b> {report['posts_count']}

üìà <b>–û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</b>
‚Ä¢ üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {report['total_metrics']['views']:,}
‚Ä¢ ‚ù§Ô∏è –õ–∞–π–∫–∏: {report['total_metrics']['likes']:,}
‚Ä¢ üîÑ –†–µ–ø–æ—Å—Ç—ã: {report['total_metrics']['shares']:,}
‚Ä¢ üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {report['total_metrics']['comments']:,}

üìä <b>–°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</b>
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –Ω–∞ –ø–æ—Å—Ç: {report['average_metrics']['views_per_post']:,}
‚Ä¢ Engagement rate: {report['average_metrics']['engagement_rate']}%

üí° <b>–ò–Ω—Å–∞–π—Ç—ã –¥–Ω—è:</b>
{chr(10).join('‚Ä¢ ' + insight for insight in report['insights'][:3])}

üéØ <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>
{chr(10).join('‚Ä¢ ' + rec for rec in report['recommendations'][:3])}

–ü–æ–¥—Ä–æ–±–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞: /analytics
            """

            await self.bot.send_message(
                chat_id=ADMIN_ID,
                text=message,
                parse_mode='HTML'
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞: {e}")

    async def get_channel_analytics(self, channel_id: str, period_days: int = 7) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∫–∞–Ω–∞–ª—É"""
        since = datetime.now() - timedelta(days=period_days)

        # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–∞–Ω–∞–ª—É
        channel_data = [
            item for item in self.performance_history
            if item['channel_id'] == channel_id and
               datetime.fromisoformat(item['timestamp']) > since
        ]

        if not channel_data:
            return {
                'channel_id': channel_id,
                'period_days': period_days,
                'message': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥'
            }

        # –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏
        total_posts = len(channel_data)
        total_views = sum(item['metrics'].get('views', 0) for item in channel_data)
        total_engagement = sum(
            item['metrics'].get('likes', 0) +
            item['metrics'].get('shares', 0) +
            item['metrics'].get('comments', 0)
            for item in channel_data
        )

        avg_score = statistics.mean([item['analysis']['score'] for item in channel_data])

        # –õ—É—á—à–∏–µ –ø–æ—Å—Ç—ã
        top_posts = sorted(
            channel_data,
            key=lambda x: x['analysis']['score'],
            reverse=True
        )[:5]

        return {
            'channel_id': channel_id,
            'period_days': period_days,
            'total_posts': total_posts,
            'total_views': total_views,
            'total_engagement': total_engagement,
            'average_score': round(avg_score, 1),
            'engagement_rate': round((total_engagement / total_views * 100) if total_views > 0 else 0, 2),
            'top_posts': [
                {
                    'id': post['post_id'],
                    'score': post['analysis']['score'],
                    'views': post['metrics'].get('views', 0),
                    'content_preview': post.get('content', '')[:100]
                }
                for post in top_posts
            ]
        }

    async def get_content_insights(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Å–∞–π—Ç–æ–≤ –ø–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
        if not self.performance_history:
            return {'message': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞'}

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–∫—Ç–æ—Ä—ã —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
        successful_posts = [
            item for item in self.performance_history
            if item['analysis']['score'] >= 7
        ]

        unsuccessful_posts = [
            item for item in self.performance_history
            if item['analysis']['score'] < 4
        ]

        # –û–±—â–∏–µ —á–µ—Ä—Ç—ã —É—Å–ø–µ—à–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
        success_factors = defaultdict(int)
        for post in successful_posts:
            for factor in post['analysis']['content_factors']['positive_factors']:
                success_factors[factor] += 1

        # –û–±—â–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –Ω–µ—É—Å–ø–µ—à–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
        failure_factors = defaultdict(int)
        for post in unsuccessful_posts:
            for factor in post['analysis']['content_factors']['negative_factors']:
                failure_factors[factor] += 1

        # –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
        time_performance = defaultdict(list)
        for post in self.performance_history:
            hour = datetime.fromisoformat(post['timestamp']).hour
            time_performance[hour].append(post['analysis']['score'])

        best_hours = sorted(
            [(hour, statistics.mean(scores)) for hour, scores in time_performance.items()],
            key=lambda x: x[1],
            reverse=True
        )[:3]

        return {
            'total_analyzed': len(self.performance_history),
            'success_rate': len(successful_posts) / len(
                self.performance_history) * 100 if self.performance_history else 0,
            'top_success_factors': [
                {'factor': factor, 'count': count}
                for factor, count in sorted(success_factors.items(), key=lambda x: x[1], reverse=True)[:5]
            ],
            'top_failure_factors': [
                {'factor': factor, 'count': count}
                for factor, count in sorted(failure_factors.items(), key=lambda x: x[1], reverse=True)[:5]
            ],
            'best_posting_hours': [
                {'hour': f"{hour}:00", 'avg_score': round(score, 1)}
                for hour, score in best_hours
            ],
            'recommendations': self._generate_content_recommendations(
                success_factors, failure_factors, time_performance
            )
        }

    def _generate_content_recommendations(self, success_factors: dict,
                                          failure_factors: dict,
                                          time_performance: dict) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
        recommendations = []

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Å–ø–µ—à–Ω—ã–º —Ñ–∞–∫—Ç–æ—Ä–∞–º
        if success_factors:
            top_factor = max(success_factors, key=success_factors.get)
            recommendations.append(f"‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å: {top_factor}")

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–æ–±–ª–µ–º–∞–º
        if failure_factors:
            top_problem = max(failure_factors, key=failure_factors.get)
            recommendations.append(f"‚ùå –ò–∑–±–µ–≥–∞–π—Ç–µ: {top_problem}")

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        if time_performance:
            best_hour = max(time_performance, key=lambda h: statistics.mean(time_performance[h]))
            recommendations.append(f"‚è∞ –õ—É—á—à–µ–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {best_hour}:00")

        # –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if len(self.performance_history) > 50:
            avg_score = statistics.mean([item['analysis']['score'] for item in self.performance_history])
            if avg_score < 5:
                recommendations.append("üìà –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å –Ω–æ–≤—ã–º–∏ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
            elif avg_score > 7:
                recommendations.append("üéØ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–π—Ç–µ —É—Å–ø–µ—à–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã")

        return recommendations[:5]