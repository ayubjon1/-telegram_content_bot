#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Content Manager Bot
–ó–∞–ø—É—Å—Ç–∏—Ç–µ: python setup.py
"""

import os
import sys
import json
import subprocess
from pathlib import Path


def check_python_version():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python"""
    if sys.version_info < (3, 8):
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.8 –∏–ª–∏ –≤—ã—à–µ")
        print(f"   –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: {sys.version}")
        sys.exit(1)
    print(f"‚úÖ Python {sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro}")


def install_dependencies():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print("\nüì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")

    try:
        subprocess.check_call([sys.executable, "-m", "pip", "install", "-r", "requirements.txt"])
        print("‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    except subprocess.CalledProcessError:
        print("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
        print("   –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å: pip install -r requirements.txt")
        return False

    return True


def create_directories():
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
    print("\nüìÅ –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π...")

    directories = ['data', 'logs', 'utils']
    for directory in directories:
        Path(directory).mkdir(exist_ok=True)
        print(f"‚úÖ {directory}/")


def setup_configuration():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("\n‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    print("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
    print("1. –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)")
    print("2. –°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–º–µ—Ä —Ñ–∞–π–ª–æ–≤")
    print("3. –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")

    choice = input("\n–í–∞—à –≤—ã–±–æ—Ä (1-3): ").strip()

    if choice == "1":
        try:
            from utils.secure_config import ConfigSetup
            ConfigSetup.setup_config_interactive()
        except ImportError:
            print("‚ùå –ú–æ–¥—É–ª—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            create_example_files()
    elif choice == "2":
        create_example_files()
    else:
        print("‚è≠Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞")


def create_example_files():
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    print("\nüìÑ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤ —Ñ–∞–π–ª–æ–≤...")

    # .env.example
    env_example = """# Content Manager Bot Configuration
# –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª –∫–∞–∫ .env –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
# –ù–ï –î–û–ë–ê–í–õ–Ø–¢–¨ –í GIT!

# –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û)
BOT_TOKEN=your_bot_token_here
OPENAI_API_KEY=your_openai_api_key_here
ADMIN_ID=123456789

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–ª—é—á–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
NEWS_API_KEY=your_news_api_key_here

# RSS –∏—Å—Ç–æ—á–Ω–∏–∫–∏ (—Ä–∞–∑–¥–µ–ª–µ–Ω—ã –∑–∞–ø—è—Ç—ã–º–∏)
RSS_FEEDS=https://lenta.ru/rss,https://ria.ru/export/rss2/archive/index.xml,https://tass.ru/rss/v2.xml

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ OpenAI
OPENAI_MODEL=gpt-4
OPENAI_MAX_TOKENS=800
OPENAI_TEMPERATURE=0.7

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
DATABASE_PATH=data/bot.db

# –ü–∞—Ä–æ–ª—å –¥–ª—è –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
CONFIG_PASSWORD=your_secure_password_here
"""

    with open('.env.example', 'w', encoding='utf-8') as f:
        f.write(env_example)
    print("‚úÖ .env.example")

    # config.json.example
    config_example = {
        "_comment": "–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–∞–∫ config.json –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏",
        "BOT_TOKEN": "your_bot_token_here",
        "OPENAI_API_KEY": "your_openai_api_key_here",
        "ADMIN_ID": 123456789,
        "NEWS_API_KEY": "your_news_api_key_here",
        "RSS_FEEDS": [
            "https://lenta.ru/rss",
            "https://ria.ru/export/rss2/archive/index.xml",
            "https://tass.ru/rss/v2.xml"
        ],
        "DATABASE_PATH": "data/bot.db",
        "OPENAI_MODEL": "gpt-4",
        "MAX_TOKENS": 800,
        "TEMPERATURE": 0.7
    }

    with open('config.json.example', 'w', encoding='utf-8') as f:
        json.dump(config_example, f, indent=2, ensure_ascii=False)
    print("‚úÖ config.json.example")

    # .gitignore
    gitignore = """# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã (–í–ê–ñ–ù–û!)
.env
config.json
config.encrypted
config.encrypted.salt
keys.py

# –õ–æ–≥–∏ –∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
*.log
logs/
data/*.db
data/*.sqlite

# Python
__pycache__/
*.pyc
*.pyo
.pytest_cache/

# IDE
.vscode/
.idea/

# OS
.DS_Store
Thumbs.db
"""

    with open('.gitignore', 'w', encoding='utf-8') as f:
        f.write(gitignore)
    print("‚úÖ .gitignore")


def validate_setup():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏...")

    issues = []

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config_files = ['.env', 'config.json', 'config.encrypted']
    if not any(Path(f).exists() for f in config_files):
        issues.append("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (.env, config.json –∏–ª–∏ config.encrypted)")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º .gitignore
    if not Path('.gitignore').exists():
        issues.append("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç .gitignore —Ñ–∞–π–ª")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    required_dirs = ['data', 'handlers', 'services', 'utils']
    for directory in required_dirs:
        if not Path(directory).exists():
            issues.append(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {directory}/")

    if issues:
        print("‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã:")
        for issue in issues:
            print(f"   {issue}")
        return False
    else:
        print("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—ã–≥–ª—è–¥–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True


def show_next_steps():
    """–ü–æ–∫–∞–∑ —Å–ª–µ–¥—É—é—â–∏—Ö —à–∞–≥–æ–≤"""
    print("\n" + "=" * 60)
    print("üéâ –ù–ê–°–¢–†–û–ô–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
    print("=" * 60)

    print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. üîë –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é:")

    if Path('.env').exists():
        print("   ‚úÖ –§–∞–π–ª .env —É–∂–µ —Å–æ–∑–¥–∞–Ω")
    else:
        print("   üìù –°–∫–æ–ø–∏—Ä—É–π—Ç–µ .env.example –≤ .env")
        print("   ‚úèÔ∏è  –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏ –∏ –∫–ª—é—á–∞–º–∏")

    print("\n2. ü§ñ –ü–æ–ª—É—á–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–æ–∫–µ–Ω—ã:")
    print("   ‚Ä¢ Bot Token: https://t.me/BotFather")
    print("   ‚Ä¢ OpenAI API: https://platform.openai.com/")
    print("   ‚Ä¢ –í–∞—à Telegram ID: https://t.me/userinfobot")

    print("\n3. üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞:")
    print("   python main.py")

    print("\n4. üì∫ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–∞–Ω–∞–ª—ã:")
    print("   ‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
    print("   ‚Ä¢ –í –±–æ—Ç–µ: üì∫ –ú–æ–∏ –∫–∞–Ω–∞–ª—ã ‚Üí ‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª")

    print("\nüìö –ü–æ–ª–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –≤ README.md")
    print("üÜò –ü—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª bot.log")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    print("ü§ñ Content Manager Bot - –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞")
    print("=" * 60)

    # –ü—Ä–æ–≤–µ—Ä–∫–∏
    check_python_version()

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞
    if not install_dependencies():
        return

    # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    create_directories()

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    setup_configuration()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞
    validate_setup()

    # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    show_next_steps()


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n\n‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {str(e)}")
        print("   –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∑–∞–Ω–æ–≤–æ")