from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import logging

from utils.keyboards import (
    news_sources_keyboard, source_list_keyboard,
    cancel_keyboard, main_menu_keyboard
)
from database.models import DatabaseModels
from services.news_parser import NewsParser
from config import ADMIN_ID, NEWS_CATEGORIES

logger = logging.getLogger(__name__)
router = Router()


class NewsStates(StatesGroup):
    waiting_for_source_name = State()
    waiting_for_source_url = State()
    waiting_for_source_category = State()


def is_admin(user_id: int) -> bool:
    return user_id == ADMIN_ID


@router.message(F.text == "üì∞ –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π")
async def show_news_sources_menu(message: Message):
    """–ü–æ–∫–∞–∑ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏ –Ω–æ–≤–æ—Å—Ç–µ–π"""
    if not is_admin(message.from_user.id):
        return

    await message.answer(
        "üì∞ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏ –Ω–æ–≤–æ—Å—Ç–µ–π</b>\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞.\n\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è RSS –ª–µ–Ω—Ç—ã –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö —Å–∞–π—Ç–æ–≤.",
        parse_mode="HTML",
        reply_markup=news_sources_keyboard()
    )


@router.callback_query(F.data == "list_sources")
async def show_sources_list(callback: CallbackQuery, db: DatabaseModels):
    """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –Ω–æ–≤–æ—Å—Ç–µ–π"""
    try:
        sources = await db.get_news_sources()

        if not sources:
            await callback.message.edit_text(
                "üì∞ <b>–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π</b>\n\n"
                "‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.\n"
                "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫.",
                parse_mode="HTML",
                reply_markup=news_sources_keyboard()
            )
            return

        text = "üì∞ <b>–í–∞—à–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π:</b>\n\n"
        for source in sources:
            status = "‚úÖ" if source['is_active'] else "‚ùå"
            text += f"{status} <b>{source['name']}</b>\n"
            text += f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {source['category']}\n"
            text += f"URL: <code>{source['url'][:50]}{'...' if len(source['url']) > 50 else ''}</code>\n\n"

        await callback.message.edit_text(
            text,
            parse_mode="HTML",
            reply_markup=source_list_keyboard(sources)
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {str(e)}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")


@router.callback_query(F.data == "add_source")
async def start_add_source(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π"""
    await state.set_state(NewsStates.waiting_for_source_name)

    await callback.message.edit_text(
        "‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 'Lenta.ru', '–†–ò–ê –ù–æ–≤–æ—Å—Ç–∏'):",
        parse_mode="HTML",
        reply_markup=cancel_keyboard()
    )


@router.message(StateFilter(NewsStates.waiting_for_source_name))
async def process_source_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞"""
    if not is_admin(message.from_user.id):
        return

    source_name = message.text.strip()

    if len(source_name) < 2:
        await message.answer(
            "‚ùå <b>–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª–∏–Ω–æ–π –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞.",
            parse_mode="HTML"
        )
        return

    await state.update_data({'source_name': source_name})
    await state.set_state(NewsStates.waiting_for_source_url)

    await message.answer(
        f"‚úÖ <b>–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ:</b> {source_name}\n\n"
        f"–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ URL RSS –ª–µ–Ω—Ç—ã.\n\n"
        f"<b>–ü—Ä–∏–º–µ—Ä—ã RSS –ª–µ–Ω—Ç:</b>\n"
        f"‚Ä¢ https://lenta.ru/rss\n"
        f"‚Ä¢ https://ria.ru/export/rss2/archive/index.xml\n"
        f"‚Ä¢ https://tass.ru/rss/v2.xml",
        parse_mode="HTML",
        reply_markup=cancel_keyboard()
    )


@router.message(StateFilter(NewsStates.waiting_for_source_url))
async def process_source_url(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ URL –∏—Å—Ç–æ—á–Ω–∏–∫–∞"""
    if not is_admin(message.from_user.id):
        return

    source_url = message.text.strip()

    # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è URL
    if not (source_url.startswith('http://') or source_url.startswith('https://')):
        await message.answer(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç URL</b>\n\n"
            "URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://",
            parse_mode="HTML"
        )
        return

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å RSS –ª–µ–Ω—Ç—ã
    test_result = await test_rss_feed(source_url)
    if not test_result['success']:
        await message.answer(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ RSS –ª–µ–Ω—Ç–µ</b>\n\n"
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å RSS —Å –∞–¥—Ä–µ—Å–∞:\n"
            f"<code>{source_url}</code>\n\n"
            f"–û—à–∏–±–∫–∞: {test_result['error']}\n\n"
            f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å URL.",
            parse_mode="HTML"
        )
        return

    await state.update_data({'source_url': source_url})
    await state.set_state(NewsStates.waiting_for_source_category)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    categories_text = "\n".join([f"‚Ä¢ {cat}" for cat in NEWS_CATEGORIES])

    await message.answer(
        f"‚úÖ <b>URL –ø—Ä–∏–Ω—è—Ç –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω!</b>\n"
        f"–ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤–æ—Å—Ç–µ–π: {test_result['news_count']}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞:\n\n"
        f"{categories_text}\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ '–æ–±—â–µ–µ' –¥–ª—è —Å–º–µ—à–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π:",
        parse_mode="HTML",
        reply_markup=cancel_keyboard()
    )


@router.message(StateFilter(NewsStates.waiting_for_source_category))
async def process_source_category(message: Message, state: FSMContext, db: DatabaseModels):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞"""
    if not is_admin(message.from_user.id):
        return

    category = message.text.strip().lower()

    if category not in NEWS_CATEGORIES and category != '–æ–±—â–µ–µ':
        categories_text = ", ".join(NEWS_CATEGORIES)
        await message.answer(
            f"‚ùå <b>–ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è</b>\n\n"
            f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {categories_text}, –æ–±—â–µ–µ",
            parse_mode="HTML"
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    source_name = data['source_name']
    source_url = data['source_url']

    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await db.add_news_source(source_name, source_url, 'rss', category)

        await state.clear()

        await message.answer(
            f"‚úÖ <b>–ò—Å—Ç–æ—á–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
            f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {source_name}\n"
            f"<b>URL:</b> <code>{source_url}</code>\n"
            f"<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {category}\n\n"
            f"–ò—Å—Ç–æ—á–Ω–∏–∫ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!",
            parse_mode="HTML",
            reply_markup=news_sources_keyboard()
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞: {str(e)}")
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            parse_mode="HTML"
        )


async def test_rss_feed(url: str) -> dict:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RSS –ª–µ–Ω—Ç—ã"""
    try:
        async with NewsParser() as parser:
            news_items = await parser.parse_rss_feed(url, "Test Source")
            return {
                'success': True,
                'news_count': len(news_items),
                'error': None
            }
    except Exception as e:
        return {
            'success': False,
            'news_count': 0,
            'error': str(e)
        }


@router.callback_query(F.data == "test_parsing")
async def test_all_sources(callback: CallbackQuery, db: DatabaseModels):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
    try:
        await callback.message.edit_text(
            "üß™ <b>–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤...</b>\n\n"
            "–ü—Ä–æ–≤–µ—Ä—è—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤—Å–µ—Ö RSS –ª–µ–Ω—Ç...",
            parse_mode="HTML"
        )

        sources = await db.get_news_sources()
        if not sources:
            await callback.message.edit_text(
                "‚ùå <b>–ù–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</b>\n\n"
                "–î–æ–±–∞–≤—å—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞.",
                parse_mode="HTML",
                reply_markup=news_sources_keyboard()
            )
            return

        results = []
        total_news = 0

        async with NewsParser() as parser:
            for source in sources:
                try:
                    news_items = await parser.parse_rss_feed(
                        source['url'],
                        source['name']
                    )
                    news_count = len(news_items)
                    total_news += news_count

                    status = "‚úÖ" if news_count > 0 else "‚ö†Ô∏è"
                    results.append(f"{status} <b>{source['name']}</b>: {news_count} –Ω–æ–≤–æ—Å—Ç–µ–π")

                except Exception as e:
                    results.append(f"‚ùå <b>{source['name']}</b>: –û—à–∏–±–∫–∞ - {str(e)[:50]}")

        result_text = f"""
üß™ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</b>

<b>–í—Å–µ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:</b> {len(sources)}
<b>–í—Å–µ–≥–æ –Ω–æ–≤–æ—Å—Ç–µ–π:</b> {total_news}

<b>–î–µ—Ç–∞–ª–∏ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º:</b>
{chr(10).join(results)}

<b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>
‚Ä¢ ‚úÖ - –ò—Å—Ç–æ—á–Ω–∏–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ
‚Ä¢ ‚ö†Ô∏è - –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ –Ω–æ–≤–æ—Å—Ç–µ–π –º–∞–ª–æ
‚Ä¢ ‚ùå - –ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –æ—à–∏–±–∫–∞
        """

        await callback.message.edit_text(
            result_text,
            parse_mode="HTML",
            reply_markup=news_sources_keyboard()
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {str(e)}")
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</b>\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏.",
            parse_mode="HTML",
            reply_markup=news_sources_keyboard()
        )


@router.callback_query(F.data.startswith("source_"))
async def show_source_details(callback: CallbackQuery, db: DatabaseModels):
    """–ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª–µ–π –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π"""
    source_id = int(callback.data.split("_")[1])

    try:
        sources = await db.get_news_sources()
        source = next((src for src in sources if src['id'] == source_id), None)

        if not source:
            await callback.answer("‚ùå –ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫
        test_result = await test_rss_feed(source['url'])

        status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if source['is_active'] else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
        test_status = "‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç" if test_result['success'] else "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

        text = f"""
üì∞ <b>{source['name']}</b>

<b>URL:</b> <code>{source['url']}</code>
<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {source['category']}
<b>–¢–∏–ø:</b> {source['source_type'].upper()}
<b>–°—Ç–∞—Ç—É—Å:</b> {status}
<b>–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å:</b> {test_status}

<b>–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ç–µ—Å—Ç:</b>
–ù–æ–≤–æ—Å—Ç–µ–π –Ω–∞–π–¥–µ–Ω–æ: {test_result['news_count']}
{f"–û—à–∏–±–∫–∞: {test_result['error']}" if test_result['error'] else ""}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
        """

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–µ–π—Å—Ç–≤–∏–π
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

        toggle_text = "üî¥ –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å" if source['is_active'] else "üü¢ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å"
        toggle_action = f"deactivate_source_{source_id}" if source['is_active'] else f"activate_source_{source_id}"

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üß™ –¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞", callback_data=f"test_source_{source_id}")],
                [InlineKeyboardButton(text=toggle_text, callback_data=toggle_action)],
                [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫", callback_data=f"delete_source_{source_id}")],
                [InlineKeyboardButton(text="üîô –ö —Å–ø–∏—Å–∫—É –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤", callback_data="list_sources")]
            ]
        )

        await callback.message.edit_text(
            text,
            parse_mode="HTML",
            reply_markup=keyboard
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞: {str(e)}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞")


@router.callback_query(F.data.startswith("test_source_"))
async def test_single_source(callback: CallbackQuery, db: DatabaseModels):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞"""
    source_id = int(callback.data.split("_")[2])

    try:
        sources = await db.get_news_sources()
        source = next((src for src in sources if src['id'] == source_id), None)

        if not source:
            await callback.answer("‚ùå –ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        await callback.message.edit_text(
            f"üß™ <b>–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞</b>\n\n"
            f"–ü—Ä–æ–≤–µ—Ä—è—é: {source['name']}...",
            parse_mode="HTML"
        )

        # –ü–æ–¥—Ä–æ–±–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        async with NewsParser() as parser:
            news_items = await parser.parse_rss_feed(source['url'], source['name'])

        if news_items:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –Ω–æ–≤–æ—Å—Ç–µ–π
            examples = []
            for i, news in enumerate(news_items[:3]):
                examples.append(f"{i + 1}. {news['title'][:60]}...")

            examples_text = "\n".join(examples)

            result_text = f"""
‚úÖ <b>–¢–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω!</b>

<b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> {source['name']}
<b>–ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤–æ—Å—Ç–µ–π:</b> {len(news_items)}

<b>–ü—Ä–∏–º–µ—Ä—ã –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤:</b>
{examples_text}

<b>–°—Ç–∞—Ç—É—Å:</b> –ò—Å—Ç–æ—á–Ω–∏–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
            """
        else:
            result_text = f"""
‚ö†Ô∏è <b>–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</b>

<b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> {source['name']}
<b>–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:</b>
‚Ä¢ RSS –ª–µ–Ω—Ç–∞ –ø—É—Å—Ç–∞
‚Ä¢ –§–æ—Ä–º–∞—Ç –ª–µ–Ω—Ç—ã –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
‚Ä¢ –ù–æ–≤–æ—Å—Ç–∏ —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤

<b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</b> –ü—Ä–æ–≤–µ—Ä—å—Ç–µ URL –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫
            """

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –¥–µ—Ç–∞–ª—è–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ö –∏—Å—Ç–æ—á–Ω–∏–∫—É", callback_data=f"source_{source_id}")],
                [InlineKeyboardButton(text="üìã –ö —Å–ø–∏—Å–∫—É", callback_data="list_sources")]
            ]
        )

        await callback.message.edit_text(
            result_text,
            parse_mode="HTML",
            reply_markup=keyboard
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞: {str(e)}")
        await callback.message.edit_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</b>\n\n"
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫: {str(e)}",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"source_{source_id}")]
                ]
            )
        )


@router.callback_query(F.data == "refresh_sources")
async def refresh_sources(callback: CallbackQuery, db: DatabaseModels):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
    try:
        await callback.message.edit_text(
            "üîÑ <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤...</b>\n\n"
            "–ü—Ä–æ–≤–µ—Ä—è—é –≤—Å–µ RSS –ª–µ–Ω—Ç—ã –∏ –ø–æ–ª—É—á–∞—é —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏...",
            parse_mode="HTML"
        )

        sources = await db.get_news_sources()
        total_news = 0
        updated_sources = 0

        async with NewsParser() as parser:
            all_news = await parser.get_news_from_sources(sources)
            total_news = len(all_news)
            updated_sources = len([src for src in sources if src['is_active']])

        await callback.message.edit_text(
            f"‚úÖ <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!</b>\n\n"
            f"<b>–û–±–Ω–æ–≤–ª–µ–Ω–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:</b> {updated_sources}\n"
            f"<b>–ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ—Å—Ç–µ–π:</b> {total_news}\n\n"
            f"–ù–æ–≤–æ—Å—Ç–∏ –≥–æ—Ç–æ–≤—ã –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.",
            parse_mode="HTML",
            reply_markup=news_sources_keyboard()
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {str(e)}")
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è</b>\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π.",
            parse_mode="HTML",
            reply_markup=news_sources_keyboard()
        )


@router.callback_query(F.data == "back_to_sources")
async def back_to_sources(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏"""
    await callback.message.edit_text(
        "üì∞ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏ –Ω–æ–≤–æ—Å—Ç–µ–π</b>\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞.\n\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è RSS –ª–µ–Ω—Ç—ã –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö —Å–∞–π—Ç–æ–≤.",
        parse_mode="HTML",
        reply_markup=news_sources_keyboard()
    )