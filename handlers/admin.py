from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.exceptions import TelegramAPIError
import logging
import re

from utils.keyboards import main_menu_keyboard
from config import config

logger = logging.getLogger(__name__)
router = Router()


class ChannelStates(StatesGroup):
    waiting_for_channel_id = State()
    waiting_for_channel_name = State()
    waiting_for_posts_per_day = State()


def is_admin(user_id: int) -> bool:
    return user_id == config.ADMIN_ID


@router.message(Command("start"))
async def start_command(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    await state.clear()

    welcome_text = """
ü§ñ <b>Content Manager Bot</b>

‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!
‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞
‚úÖ –í—Å–µ –º–æ–¥—É–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/add_channel - –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª
/list_channels - —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
/test_post - —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç
/remove_channel - —É–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:
    """

    await message.answer(
        welcome_text,
        parse_mode="HTML",
        reply_markup=main_menu_keyboard()
    )


# –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞–º–∏

@router.message(Command("add_channel"))
async def start_add_channel(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞"""
    if not is_admin(message.from_user.id):
        return

    await state.set_state(ChannelStates.waiting_for_channel_id)

    await message.answer(
        "üì∫ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –∫–∞–Ω–∞–ª–∞ –≤ –æ–¥–Ω–æ–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n"
        "‚Ä¢ <code>@channel_username</code> (–¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö)\n"
        "‚Ä¢ <code>-100xxxxxxxxx</code> (–¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö)\n\n"
        "‚ùóÔ∏è <b>–í–∞–∂–Ω–æ:</b> –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –ø—Ä–∞–≤–∞–º–∏ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π!",
        parse_mode="HTML"
    )


@router.message(StateFilter(ChannelStates.waiting_for_channel_id))
async def process_channel_id(message: Message, state: FSMContext, bot: Bot, db):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ ID –∫–∞–Ω–∞–ª–∞"""
    if not is_admin(message.from_user.id):
        return

    channel_id = message.text.strip()

    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞
    if not (channel_id.startswith('@') or channel_id.startswith('-100')):
        await message.answer(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
            "‚Ä¢ @channel_username\n"
            "‚Ä¢ -100xxxxxxxxx",
            parse_mode="HTML"
        )
        return

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É
        chat = await bot.get_chat(channel_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞
        bot_member = await bot.get_chat_member(channel_id, bot.id)
        if bot_member.status not in ['administrator', 'creator']:
            await message.answer(
                "‚ùå <b>–ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
                "–î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –ø—Ä–∞–≤–∞–º–∏ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π.",
                parse_mode="HTML"
            )
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        await state.update_data({
            'channel_id': channel_id,
            'channel_name': chat.title or chat.username or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'
        })

        await state.set_state(ChannelStates.waiting_for_posts_per_day)

        await message.answer(
            f"‚úÖ <b>–ö–∞–Ω–∞–ª –Ω–∞–π–¥–µ–Ω!</b>\n\n"
            f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {chat.title or chat.username}\n"
            f"<b>ID:</b> <code>{channel_id}</code>\n\n"
            f"–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –≤ –¥–µ–Ω—å (1-20):",
            parse_mode="HTML"
        )

    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É {channel_id}: {str(e)}")
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É</b>\n\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n"
            "‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å ID –∫–∞–Ω–∞–ª–∞\n"
            "‚Ä¢ –ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n"
            "‚Ä¢ –£ –±–æ—Ç–∞ –µ—Å—Ç—å –ø—Ä–∞–≤–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π",
            parse_mode="HTML"
        )


@router.message(StateFilter(ChannelStates.waiting_for_posts_per_day))
async def process_posts_per_day(message: Message, state: FSMContext, db):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Å—Ç–æ–≤"""
    if not is_admin(message.from_user.id):
        return

    try:
        posts_per_day = int(message.text.strip())

        if posts_per_day < 1 or posts_per_day > 20:
            await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 20")
            return

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        data = await state.get_data()
        channel_id = data['channel_id']
        channel_name = data['channel_name']

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        await db.add_channel(channel_id, channel_name, posts_per_day)

        await state.clear()

        await message.answer(
            f"‚úÖ <b>–ö–∞–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
            f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {channel_name}\n"
            f"<b>ID:</b> <code>{channel_id}</code>\n"
            f"<b>–ü–æ—Å—Ç–æ–≤ –≤ –¥–µ–Ω—å:</b> {posts_per_day}\n\n"
            f"–ö–∞–Ω–∞–ª –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!",
            parse_mode="HTML",
            reply_markup=main_menu_keyboard()
        )

    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 20")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞: {str(e)}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@router.message(Command("list_channels"))
async def list_channels(message: Message, db):
    """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤"""
    if not is_admin(message.from_user.id):
        return

    try:
        channels = await db.get_channels()

        if not channels:
            await message.answer(
                "üì∫ <b>–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤</b>\n\n"
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add_channel –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.",
                parse_mode="HTML"
            )
            return

        text = "üì∫ <b>–í–∞—à–∏ –∫–∞–Ω–∞–ª—ã:</b>\n\n"
        for i, channel in enumerate(channels, 1):
            status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if channel['is_active'] else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
            text += f"<b>{i}. {channel['channel_name']}</b>\n"
            text += f"   ID: <code>{channel['channel_id']}</code>\n"
            text += f"   –°—Ç–∞—Ç—É—Å: {status}\n"
            text += f"   –ü–æ—Å—Ç–æ–≤ –≤ –¥–µ–Ω—å: {channel['posts_per_day']}\n\n"

        text += "\n<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
        text += "/test_post [ID] - —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç\n"
        text += "/remove_channel [ID] - —É–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª"

        await message.answer(text, parse_mode="HTML")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤: {str(e)}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@router.message(Command("test_post"))
async def test_post_command(message: Message, bot: Bot, db):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞"""
    if not is_admin(message.from_user.id):
        return

    # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É
    parts = message.text.split()
    if len(parts) < 2:
        await message.answer(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>/test_post @channel</code>\n"
            "–ò–ª–∏: <code>/test_post -100xxxxxxxxx</code>",
            parse_mode="HTML"
        )
        return

    channel_id = parts[1]

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–Ω–∞–ª –≤ –ë–î
        channels = await db.get_channels()
        channel = next((ch for ch in channels if ch['channel_id'] == channel_id), None)

        if not channel:
            await message.answer(
                f"‚ùå <b>–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ</b>\n\n"
                f"–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫–∞–Ω–∞–ª: /add_channel",
                parse_mode="HTML"
            )
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç
        test_text = """
üß™ <b>–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç –æ—Ç Content Manager Bot</b>

‚úÖ –ï—Å–ª–∏ –≤—ã –≤–∏–¥–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –±–æ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!

<b>–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ:</b>
‚Ä¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–∞–Ω–∞–ª—É ‚úÖ
‚Ä¢ –ü—Ä–∞–≤–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É ‚úÖ
‚Ä¢ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ ‚úÖ

ü§ñ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø—É–±–ª–∏–∫–∞—Ü–∏—è–º!

#—Ç–µ—Å—Ç #contentmanager #–≥–æ—Ç–æ–≤–æ
        """

        sent_message = await bot.send_message(
            chat_id=channel_id,
            text=test_text,
            parse_mode="HTML"
        )

        await message.answer(
            f"‚úÖ <b>–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!</b>\n\n"
            f"<b>–ö–∞–Ω–∞–ª:</b> {channel['channel_name']}\n"
            f"<b>ID —Å–æ–æ–±—â–µ–Ω–∏—è:</b> {sent_message.message_id}\n\n"
            f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞–Ω–∞–ª - –ø–æ—Å—Ç –¥–æ–ª–∂–µ–Ω –ø–æ—è–≤–∏—Ç—å—Å—è.",
            parse_mode="HTML"
        )

    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ {channel_id}: {str(e)}")
        await message.answer(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏</b>\n\n"
            f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ.\n"
            f"–î–µ—Ç–∞–ª–∏: {str(e)}",
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞: {str(e)}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@router.message(Command("remove_channel"))
async def remove_channel_command(message: Message, db):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞"""
    if not is_admin(message.from_user.id):
        return

    parts = message.text.split()
    if len(parts) < 2:
        await message.answer(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>/remove_channel @channel</code>",
            parse_mode="HTML"
        )
        return

    channel_id = parts[1]

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
        channels = await db.get_channels()
        channel = next((ch for ch in channels if ch['channel_id'] == channel_id), None)

        if not channel:
            await message.answer(f"‚ùå –ö–∞–Ω–∞–ª {channel_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ")
            return

        # –£–¥–∞–ª—è–µ–º –∫–∞–Ω–∞–ª
        await db.delete_channel(channel_id)

        await message.answer(
            f"‚úÖ <b>–ö–∞–Ω–∞–ª —É–¥–∞–ª–µ–Ω</b>\n\n"
            f"<b>–£–¥–∞–ª–µ–Ω:</b> {channel['channel_name']}\n"
            f"<b>ID:</b> {channel_id}",
            parse_mode="HTML"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞: {str(e)}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {str(e)}")


# –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–µ–Ω—é...

@router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_statistics(message: Message, db):
    if not is_admin(message.from_user.id):
        return

    try:
        stats = await db.get_statistics()
        channels = await db.get_channels()
        sources = await db.get_news_sources()

        active_channels = len([ch for ch in channels if ch['is_active']])

        text = f"""
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>

üü¢ <b>–ë–æ—Ç:</b> –†–∞–±–æ—Ç–∞–µ—Ç
üì∫ <b>–ö–∞–Ω–∞–ª–æ–≤:</b> {len(channels)} (–∞–∫—Ç–∏–≤–Ω—ã—Ö: {active_channels})
üì∞ <b>–ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤:</b> {len(sources)}
üìù <b>–ü–æ—Å—Ç–æ–≤:</b> {stats['posts_count']}

<b>–ö–æ–º–∞–Ω–¥—ã:</b>
/add_channel - –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª
/list_channels - —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
/test_post [ID] - —Ç–µ—Å—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        """

        await message.answer(text, parse_mode="HTML")

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")


@router.message(F.text == "üì∫ –ú–æ–∏ –∫–∞–Ω–∞–ª—ã")
async def show_channels(message: Message, db):
    if not is_admin(message.from_user.id):
        return

    try:
        channels = await db.get_channels()

        if not channels:
            text = """
üì∫ <b>–ú–æ–∏ –∫–∞–Ω–∞–ª—ã</b>

‚ùå –ö–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã.

<b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞:</b>
1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add_channel
3. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º

<b>–ö–æ–º–∞–Ω–¥—ã:</b>
/add_channel - –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª
/list_channels - —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
            """
        else:
            text = f"üì∫ <b>–ö–∞–Ω–∞–ª–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {len(channels)}</b>\n\n"
            text += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /list_channels –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞"

        await message.answer(text, parse_mode="HTML")

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@router.message(F.text == "üì∞ –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π")
async def show_sources(message: Message, db):
    if not is_admin(message.from_user.id):
        return

    try:
        sources = await db.get_news_sources()

        text = f"üì∞ <b>–ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {len(sources)}</b>\n\n"
        for source in sources[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
            status = "‚úÖ" if source['is_active'] else "‚ùå"
            text += f"{status} {source['name']}\n"

        if len(sources) > 3:
            text += f"\n... –∏ –µ—â–µ {len(sources) - 3}"

        await message.answer(text, parse_mode="HTML")

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def show_settings(message: Message):
    if not is_admin(message.from_user.id):
        return

    await message.answer(
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
        "üé® –°—Ç–∏–ª—å: –ü—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π\n"
        "‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª: 3 —á–∞—Å–∞\n"
        "üìä –ü–æ—Å—Ç–æ–≤ –≤ –¥–µ–Ω—å: 5\n\n"
        "–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...",
        parse_mode="HTML"
    )


@router.message(F.text == "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é")
async def start_publication(message: Message, db, content_manager):
    if not is_admin(message.from_user.id):
        return

    try:
        channels = await db.get_channels()
        if not channels:
            await message.answer(
                "‚ö†Ô∏è <b>–ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤</b>\n\n"
                "–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫–∞–Ω–∞–ª—ã: /add_channel",
                parse_mode="HTML"
            )
            return

        await message.answer("üîÑ –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π...")
        await content_manager.process_and_publish_news()
        await message.answer("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@router.message()
async def handle_all(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    current_state = await state.get_state()
    if current_state:
        return  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è

    await message.answer(
        f"–ü–æ–ª—É—á–∏–ª: {message.text}\n\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –∫–æ–º–∞–Ω–¥",
        reply_markup=main_menu_keyboard()
    )


@router.callback_query()
async def handle_callbacks(callback: CallbackQuery):
    await callback.answer("–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")


@router.message(Command("test_parsing"))
async def test_parsing_command(message: Message, db):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–æ–≤–æ—Å—Ç–µ–π"""
    if not is_admin(message.from_user.id):
        return

    await message.answer("üîÑ <b>–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–æ–≤–æ—Å—Ç–µ–π...</b>", parse_mode="HTML")

    try:
        from services.news_parser import NewsParser

        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        sources = await db.get_news_sources()
        if not sources:
            await message.answer("‚ùå –ù–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –Ω–æ–≤–æ—Å—Ç–µ–π –≤ –±–∞–∑–µ")
            return

        total_news = 0
        results = []

        async with NewsParser() as parser:
            for source in sources[:3]:  # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 3 –∏—Å—Ç–æ—á–Ω–∏–∫–∞
                result = await parser.test_source(source['url'], source['name'])
                total_news += result['news_count']

                status = "‚úÖ" if result['success'] else "‚ùå"
                results.append(f"{status} <b>{source['name']}</b>: {result['news_count']} –Ω–æ–≤–æ—Å—Ç–µ–π")

        result_text = f"""
üß™ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞</b>

<b>–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:</b> {len(results)}
<b>–í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ—Å—Ç–µ–π:</b> {total_news}

<b>–î–µ—Ç–∞–ª–∏:</b>
{chr(10).join(results)}

{f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!" if total_news > 0 else "‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π"}
        """

        await message.answer(result_text, parse_mode="HTML")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞: {str(e)}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")


@router.message(Command("test_ai"))
async def test_ai_command(message: Message, content_manager):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ò–ò –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    if not is_admin(message.from_user.id):
        return

    await message.answer("ü§ñ <b>–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ò–ò –æ–±—Ä–∞–±–æ—Ç–∫–∏...</b>", parse_mode="HTML")

    try:
        result = await content_manager.test_ai_processing()

        if result['success']:
            response = f"""
‚úÖ <b>–ò–ò —Ç–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω!</b>

<b>–ò—Å—Ö–æ–¥–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫:</b>
{result['original_title']}

<b>–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç:</b>
{result['processed_content']}

<b>–°—Ç–∏–ª—å:</b> {result['style']}
<b>–•–µ—à—Ç–µ–≥–∏:</b> {' '.join(result['hashtags'])}

üéâ –ò–ò –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!
            """
        else:
            response = f"""
‚ùå <b>–û—à–∏–±–∫–∞ –ò–ò —Ç–µ—Å—Ç–∞</b>

{result['error']}

–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ OpenAI API –∫–ª—é—á–∞.
            """

        await message.answer(response, parse_mode="HTML")

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ò–ò: {str(e)}")