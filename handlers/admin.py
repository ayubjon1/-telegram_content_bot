# handlers/admin.py - –£–ü–†–û–©–ï–ù–ù–ê–Ø –†–ê–ë–û–ß–ê–Ø –í–ï–†–°–ò–Ø
from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.exceptions import TelegramAPIError
import logging
import re

from utils.keyboards import main_menu_keyboard
from config import config

logger = logging.getLogger(__name__)
router = Router()


class ChannelStates(StatesGroup):
    waiting_for_channel_id = State()
    waiting_for_channel_name = State()
    waiting_for_posts_per_day = State()


def is_admin(user_id: int) -> bool:
    return user_id == config.ADMIN_ID


@router.message(Command("start"))
async def start_command(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    await state.clear()

    welcome_text = f"""
ü§ñ <b>Content Manager Bot v3.0.1</b>

‚úÖ <b>–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!</b>
‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç
‚úÖ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã –≥–æ—Ç–æ–≤—ã

üéØ <b>–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏
‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π —á–µ—Ä–µ–∑ –ò–ò
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞

üöÄ <b>–ö–æ–º–∞–Ω–¥—ã:</b>
‚Ä¢ /add_channel - –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª
‚Ä¢ /list_channels - —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
‚Ä¢ /test_post - —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç
‚Ä¢ /status - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ /health_check - –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:
    """

    await message.answer(
        welcome_text,
        parse_mode="HTML",
        reply_markup=main_menu_keyboard()
    )


@router.message(Command("status"))
async def status_command(message: Message, db, scheduler, monitor):
    """–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
    if not is_admin(message.from_user.id):
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        channels = await db.get_channels()
        sources = await db.get_news_sources()

        scheduler_status = "üü¢ –†–∞–±–æ—Ç–∞–µ—Ç" if scheduler and scheduler.running else "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        monitor_status = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if monitor and monitor.running else "üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"

        status_text = f"""
üìä <b>–°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´</b>

üè¢ <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:</b>
‚Ä¢ üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: {scheduler_status}
‚Ä¢ üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: {monitor_status}
‚Ä¢ üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: üü¢ –†–∞–±–æ—Ç–∞–µ—Ç
‚Ä¢ ü§ñ OpenAI API: {'üü¢ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if config.OPENAI_API_KEY else 'üî¥ –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}

üìä <b>–†–µ—Å—É—Ä—Å—ã:</b>
‚Ä¢ üì∫ –ö–∞–Ω–∞–ª–æ–≤: {len(channels)}
‚Ä¢ üì∞ –ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {len(sources)}
‚Ä¢ üìà –ó–∞–¥–∞—á –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {len(scheduler.jobs) if scheduler else 0}

‚è∞ <b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b> –ê–∫—Ç–∏–≤–µ–Ω
üîß <b>–í–µ—Ä—Å–∏—è:</b> 3.0.1-fixed
        """

        await message.answer(status_text, parse_mode="HTML")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {str(e)}")


@router.message(Command("health_check"))
async def health_check_command(message: Message, db, scheduler, monitor):
    """–ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
    if not is_admin(message.from_user.id):
        return

    await message.answer("üîç <b>–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞...</b>", parse_mode="HTML")

    checks = []
    issues = []

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    try:
        await db.get_setting('test')
        checks.append("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: –†–∞–±–æ—Ç–∞–µ—Ç")
    except Exception as e:
        issues.append(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    if scheduler and scheduler.running:
        checks.append(f"‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: –†–∞–±–æ—Ç–∞–µ—Ç ({len(scheduler.jobs)} –∑–∞–¥–∞—á)")
    else:
        issues.append("‚ùå –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    if monitor and monitor.running:
        checks.append("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: –ê–∫—Ç–∏–≤–µ–Ω")
    else:
        issues.append("‚ùå –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: –ù–µ–∞–∫—Ç–∏–≤–µ–Ω")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ OpenAI
    if config.OPENAI_API_KEY:
        checks.append("‚úÖ OpenAI API: –ö–ª—é—á –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    else:
        issues.append("‚ùå OpenAI API: –ö–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–Ω–∞–ª–æ–≤
    try:
        channels = await db.get_channels()
        if channels:
            active_channels = len([ch for ch in channels if ch['is_active']])
            checks.append(f"‚úÖ –ö–∞–Ω–∞–ª—ã: {active_channels} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–∑ {len(channels)}")
        else:
            issues.append("‚ö†Ô∏è –ö–∞–Ω–∞–ª—ã: –ù–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
    except Exception as e:
        issues.append(f"‚ùå –ö–∞–Ω–∞–ª—ã: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏")

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    health_score = len(checks) / (len(checks) + len(issues)) * 100 if (checks or issues) else 0

    if health_score >= 80:
        status_emoji = "üü¢"
        status_text = "–û–¢–õ–ò–ß–ù–û"
    elif health_score >= 60:
        status_emoji = "üü°"
        status_text = "–•–û–†–û–®–û"
    else:
        status_emoji = "üî¥"
        status_text = "–ü–†–û–ë–õ–ï–ú–´"

    result_text = f"""
{status_emoji} <b>–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê</b>

üìä <b>–û–±—â–∏–π —Å—Ç–∞—Ç—É—Å:</b> {status_text} ({health_score:.0f}%)

‚úÖ <b>–†–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ:</b>
{chr(10).join(checks) if checks else "‚Ä¢ –ù–µ—Ç –∏—Å–ø—Ä–∞–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"}

‚ùå <b>–¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è:</b>
{chr(10).join(issues) if issues else "‚Ä¢ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤ –ø–æ—Ä—è–¥–∫–µ"}

üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>
"""

    if not config.OPENAI_API_KEY:
        result_text += "\n‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ OPENAI_API_KEY –¥–ª—è –ò–ò —Ñ—É–Ω–∫—Ü–∏–π"
    if not channels:
        result_text += "\n‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"
    if health_score >= 80:
        result_text += "\nüéâ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!"

    await message.answer(result_text, parse_mode="HTML")


@router.message(Command("add_channel"))
async def start_add_channel(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞"""
    if not is_admin(message.from_user.id):
        return

    await state.set_state(ChannelStates.waiting_for_channel_id)

    await message.answer(
        "üì∫ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –∫–∞–Ω–∞–ª–∞:\n"
        "‚Ä¢ <code>@channel_username</code> (–¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö)\n"
        "‚Ä¢ <code>-100xxxxxxxxx</code> (–¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö)\n\n"
        "‚ùóÔ∏è <b>–í–∞–∂–Ω–æ:</b> –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞!",
        parse_mode="HTML"
    )


@router.message(StateFilter(ChannelStates.waiting_for_channel_id))
async def process_channel_id(message: Message, state: FSMContext, bot: Bot, db):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ ID –∫–∞–Ω–∞–ª–∞"""
    if not is_admin(message.from_user.id):
        return

    channel_id = message.text.strip()

    if not (channel_id.startswith('@') or channel_id.startswith('-100')):
        await message.answer(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ @channel_username –∏–ª–∏ -100xxxxxxxxx",
            parse_mode="HTML"
        )
        return

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É
        chat = await bot.get_chat(channel_id)
        bot_member = await bot.get_chat_member(channel_id, bot.id)

        if bot_member.status not in ['administrator', 'creator']:
            await message.answer(
                "‚ùå <b>–ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
                "–î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –ø—Ä–∞–≤–∞–º–∏ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π.",
                parse_mode="HTML"
            )
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–Ω–∞–ª
        channel_name = chat.title or chat.username or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'
        await db.add_channel(channel_id, channel_name, 5)  # 5 –ø–æ—Å—Ç–æ–≤ –≤ –¥–µ–Ω—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

        await state.clear()

        await message.answer(
            f"‚úÖ <b>–ö–∞–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
            f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {channel_name}\n"
            f"<b>ID:</b> <code>{channel_id}</code>\n"
            f"<b>–ü–æ—Å—Ç–æ–≤ –≤ –¥–µ–Ω—å:</b> 5\n\n"
            f"–ö–∞–Ω–∞–ª –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!",
            parse_mode="HTML",
            reply_markup=main_menu_keyboard()
        )

    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É: {e}")
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É</b>\n\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å ID –∏ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞.",
            parse_mode="HTML"
        )


@router.message(Command("list_channels"))
async def list_channels(message: Message, db):
    """–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤"""
    if not is_admin(message.from_user.id):
        return

    try:
        channels = await db.get_channels()

        if not channels:
            await message.answer(
                "üì∫ <b>–ö–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add_channel –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.",
                parse_mode="HTML"
            )
            return

        text = "üì∫ <b>–í–∞—à–∏ –∫–∞–Ω–∞–ª—ã:</b>\n\n"
        for i, channel in enumerate(channels, 1):
            status = "‚úÖ" if channel['is_active'] else "‚ùå"
            text += f"<b>{i}. {channel['channel_name']}</b>\n"
            text += f"   ID: <code>{channel['channel_id']}</code>\n"
            text += f"   –°—Ç–∞—Ç—É—Å: {status}\n"
            text += f"   –ü–æ—Å—Ç–æ–≤ –≤ –¥–µ–Ω—å: {channel['posts_per_day']}\n\n"

        await message.answer(text, parse_mode="HTML")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@router.message(Command("test_post"))
async def test_post_command(message: Message, bot: Bot, db):
    """–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç"""
    if not is_admin(message.from_user.id):
        return

    # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É
    parts = message.text.split()
    if len(parts) < 2:
        await message.answer(
            "‚ùå <b>–§–æ—Ä–º–∞—Ç:</b> <code>/test_post @channel</code>",
            parse_mode="HTML"
        )
        return

    channel_id = parts[1]

    try:
        test_text = """
üß™ <b>–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç –æ—Ç Content Manager Bot</b>

‚úÖ –ï—Å–ª–∏ –≤–∏–¥–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ - –±–æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ!

<b>–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ:</b>
‚Ä¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–∞–Ω–∞–ª—É ‚úÖ
‚Ä¢ –ü—Ä–∞–≤–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É ‚úÖ
‚Ä¢ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ‚úÖ

ü§ñ –ì–æ—Ç–æ–≤ –∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø—É–±–ª–∏–∫–∞—Ü–∏—è–º!

#—Ç–µ—Å—Ç #–≥–æ—Ç–æ–≤–æ
        """

        sent_message = await bot.send_message(
            chat_id=channel_id,
            text=test_text,
            parse_mode="HTML"
        )

        await message.answer(
            f"‚úÖ <b>–¢–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω!</b>\n\n"
            f"–ü–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ {channel_id}\n"
            f"ID —Å–æ–æ–±—â–µ–Ω–∏—è: {sent_message.message_id}",
            parse_mode="HTML"
        )

    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞: {e}")
        await message.answer(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏</b>\n\n"
            f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ.",
            parse_mode="HTML"
        )


# ========================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ú–ï–ù–Æ
# ========================================

@router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_statistics(message: Message, db):
    """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    if not is_admin(message.from_user.id):
        return

    try:
        channels = await db.get_channels()
        sources = await db.get_news_sources()

        text = f"""
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>

üü¢ <b>–ë–æ—Ç:</b> –†–∞–±–æ—Ç–∞–µ—Ç
üì∫ <b>–ö–∞–Ω–∞–ª–æ–≤:</b> {len(channels)}
üì∞ <b>–ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤:</b> {len(sources)}

<b>–ö–æ–º–∞–Ω–¥—ã:</b>
/add_channel - –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª
/list_channels - —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
/test_post [ID] - —Ç–µ—Å—Ç
        """

        await message.answer(text, parse_mode="HTML")

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@router.message(F.text == "üì∫ –ú–æ–∏ –∫–∞–Ω–∞–ª—ã")
async def show_channels_menu(message: Message, db):
    """–ú–µ–Ω—é –∫–∞–Ω–∞–ª–æ–≤"""
    if not is_admin(message.from_user.id):
        return

    try:
        channels = await db.get_channels()

        if not channels:
            text = """
üì∫ <b>–ö–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã</b>

–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π –∫–∞–Ω–∞–ª:
1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add_channel
3. –í–≤–µ–¥–∏—Ç–µ ID –∫–∞–Ω–∞–ª–∞
            """
        else:
            text = f"üì∫ <b>–ö–∞–Ω–∞–ª–æ–≤: {len(channels)}</b>\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /list_channels"

        await message.answer(text, parse_mode="HTML")

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@router.message(F.text == "üì∞ –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π")
async def show_sources_menu(message: Message, db):
    """–ú–µ–Ω—é –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
    if not is_admin(message.from_user.id):
        return

    try:
        sources = await db.get_news_sources()
        active_sources = len([s for s in sources if s['is_active']])

        text = f"""
üì∞ <b>–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π</b>

üìä <b>–°—Ç–∞—Ç—É—Å:</b>
‚Ä¢ –í—Å–µ–≥–æ: {len(sources)}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_sources}

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏:</b>
‚Ä¢ Lenta.ru
‚Ä¢ –†–ò–ê –ù–æ–≤–æ—Å—Ç–∏
‚Ä¢ –¢–ê–°–°
‚Ä¢ –†–æ—Å—Å–∏–π—Å–∫–∞—è –≥–∞–∑–µ—Ç–∞
        """

        await message.answer(text, parse_mode="HTML")

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def show_settings_menu(message: Message, db):
    """–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    if not is_admin(message.from_user.id):
        return

    try:
        model = await db.get_setting('openai_model') or 'gpt-4'
        style = await db.get_setting('default_style') or 'engaging'

        text = f"""
‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>

ü§ñ <b>–ò–ò:</b>
‚Ä¢ –ú–æ–¥–µ–ª—å: {model}
‚Ä¢ –°—Ç–∏–ª—å: {style}

üìä <b>–û–±—â–∏–µ:</b>
‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª: 3 —á–∞—Å–∞
‚Ä¢ –ü–æ—Å—Ç–æ–≤ –≤ –¥–µ–Ω—å: 5

<b>–ö–æ–º–∞–Ω–¥—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>
/status - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
/health_check - –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
        """

        await message.answer(text, parse_mode="HTML")

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@router.message(F.text == "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é")
async def start_publication(message: Message, content_manager):
    """–ó–∞–ø—É—Å–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    if not is_admin(message.from_user.id):
        return

    try:
        await message.answer("üîÑ –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π...")

        if content_manager:
            await content_manager.process_and_publish_news()
            await message.answer("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        else:
            await message.answer("‚ùå Content Manager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@router.message(F.text == "‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞")
async def stop_bot(message: Message):
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
    if not is_admin(message.from_user.id):
        return

    await message.answer(
        "‚èπ <b>–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞</b>\n\n"
        "–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Ctrl+C –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ.\n"
        "–ë–æ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ.",
        parse_mode="HTML"
    )


@router.message(F.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def show_help(message: Message):
    """–°–ø—Ä–∞–≤–∫–∞"""
    if not is_admin(message.from_user.id):
        return

    help_text = """
‚ÑπÔ∏è <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É</b>

ü§ñ <b>Content Manager Bot v3.0.1</b>

üìã <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
‚Ä¢ /start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
‚Ä¢ /add_channel - –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª
‚Ä¢ /list_channels - —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
‚Ä¢ /test_post [ID] - —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç
‚Ä¢ /status - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ /health_check - –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞

üéØ <b>–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç:</b>
1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add_channel
3. –í–≤–µ–¥–∏—Ç–µ ID –∫–∞–Ω–∞–ª–∞
4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—É–±–ª–∏–∫–∞—Ü–∏—é

üÜò <b>–ü—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö:</b>
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /health_check
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤ bot.log
    """

    await message.answer(help_text, parse_mode="HTML")


# ========================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö –í–°–ï–• –°–û–û–ë–©–ï–ù–ò–ô
# ========================================

@router.message()
async def handle_all_messages(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    current_state = await state.get_state()
    if current_state:
        return  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ FSM

    await message.answer(
        f"üì® –ü–æ–ª—É—á–µ–Ω–æ: {message.text}\n\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:\n"
        f"/add_channel, /list_channels, /status",
        reply_markup=main_menu_keyboard()
    )


# ========================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö CALLBACK –ó–ê–ü–†–û–°–û–í
# ========================================

@router.callback_query()
async def handle_callbacks(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
    await callback.answer("üîß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")


# ========================================
# –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ö–û–ú–ê–ù–î–´ –î–õ–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò
# ========================================

@router.message(Command("debug"))
async def debug_command(message: Message, db, scheduler, monitor):
    """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"""
    if not is_admin(message.from_user.id):
        return

    debug_info = f"""
üîß <b>–û–¢–õ–ê–î–û–ß–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø</b>

üìä <b>–°—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:</b>
‚Ä¢ DB: {'‚úÖ' if db else '‚ùå'}
‚Ä¢ Scheduler: {'‚úÖ' if scheduler else '‚ùå'} ({scheduler.running if scheduler else 'N/A'})
‚Ä¢ Monitor: {'‚úÖ' if monitor else '‚ùå'} ({monitor.running if monitor else 'N/A'})

üîë <b>–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:</b>
‚Ä¢ BOT_TOKEN: {'‚úÖ' if config.BOT_TOKEN else '‚ùå'}
‚Ä¢ OPENAI_API_KEY: {'‚úÖ' if config.OPENAI_API_KEY else '‚ùå'}
‚Ä¢ ADMIN_ID: {config.ADMIN_ID}

üìÅ <b>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:</b>
‚Ä¢ –ü—É—Ç—å: {config.DATABASE_PATH if hasattr(config, 'DATABASE_PATH') else 'N/A'}

‚öôÔ∏è <b>–í–µ—Ä—Å–∏—è:</b> 3.0.1-fixed
    """

    await message.answer(debug_info, parse_mode="HTML")