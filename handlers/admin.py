from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.exceptions import TelegramAPIError
import logging
import re

from utils.keyboards import main_menu_keyboard
from config import config

logger = logging.getLogger(__name__)
router = Router()


class ChannelStates(StatesGroup):
    waiting_for_channel_id = State()
    waiting_for_channel_name = State()
    waiting_for_posts_per_day = State()


def is_admin(user_id: int) -> bool:
    return user_id == config.ADMIN_ID


@router.message(Command("start"))
async def start_command(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    await state.clear()

    welcome_text = """
ü§ñ <b>Content Manager Bot</b>

‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!
‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞
‚úÖ –í—Å–µ –º–æ–¥—É–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/add_channel - –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª
/list_channels - —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
/test_post - —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç
/remove_channel - —É–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:
    """

    await message.answer(
        welcome_text,
        parse_mode="HTML",
        reply_markup=main_menu_keyboard()
    )


# –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞–º–∏

@router.message(Command("add_channel"))
async def start_add_channel(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞"""
    if not is_admin(message.from_user.id):
        return

    await state.set_state(ChannelStates.waiting_for_channel_id)

    await message.answer(
        "üì∫ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –∫–∞–Ω–∞–ª–∞ –≤ –æ–¥–Ω–æ–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n"
        "‚Ä¢ <code>@channel_username</code> (–¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö)\n"
        "‚Ä¢ <code>-100xxxxxxxxx</code> (–¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö)\n\n"
        "‚ùóÔ∏è <b>–í–∞–∂–Ω–æ:</b> –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –ø—Ä–∞–≤–∞–º–∏ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π!",
        parse_mode="HTML"
    )


@router.message(StateFilter(ChannelStates.waiting_for_channel_id))
async def process_channel_id(message: Message, state: FSMContext, bot: Bot, db):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ ID –∫–∞–Ω–∞–ª–∞"""
    if not is_admin(message.from_user.id):
        return

    channel_id = message.text.strip()

    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞
    if not (channel_id.startswith('@') or channel_id.startswith('-100')):
        await message.answer(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
            "‚Ä¢ @channel_username\n"
            "‚Ä¢ -100xxxxxxxxx",
            parse_mode="HTML"
        )
        return

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É
        chat = await bot.get_chat(channel_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞
        bot_member = await bot.get_chat_member(channel_id, bot.id)
        if bot_member.status not in ['administrator', 'creator']:
            await message.answer(
                "‚ùå <b>–ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
                "–î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –ø—Ä–∞–≤–∞–º–∏ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π.",
                parse_mode="HTML"
            )
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        await state.update_data({
            'channel_id': channel_id,
            'channel_name': chat.title or chat.username or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'
        })

        await state.set_state(ChannelStates.waiting_for_posts_per_day)

        await message.answer(
            f"‚úÖ <b>–ö–∞–Ω–∞–ª –Ω–∞–π–¥–µ–Ω!</b>\n\n"
            f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {chat.title or chat.username}\n"
            f"<b>ID:</b> <code>{channel_id}</code>\n\n"
            f"–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –≤ –¥–µ–Ω—å (1-20):",
            parse_mode="HTML"
        )

    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É {channel_id}: {str(e)}")
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É</b>\n\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n"
            "‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å ID –∫–∞–Ω–∞–ª–∞\n"
            "‚Ä¢ –ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n"
            "‚Ä¢ –£ –±–æ—Ç–∞ –µ—Å—Ç—å –ø—Ä–∞–≤–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π",
            parse_mode="HTML"
        )


@router.message(StateFilter(ChannelStates.waiting_for_posts_per_day))
async def process_posts_per_day(message: Message, state: FSMContext, db):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Å—Ç–æ–≤"""
    if not is_admin(message.from_user.id):
        return

    try:
        posts_per_day = int(message.text.strip())

        if posts_per_day < 1 or posts_per_day > 20:
            await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 20")
            return

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        data = await state.get_data()
        channel_id = data['channel_id']
        channel_name = data['channel_name']

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        await db.add_channel(channel_id, channel_name, posts_per_day)

        await state.clear()

        await message.answer(
            f"‚úÖ <b>–ö–∞–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
            f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {channel_name}\n"
            f"<b>ID:</b> <code>{channel_id}</code>\n"
            f"<b>–ü–æ—Å—Ç–æ–≤ –≤ –¥–µ–Ω—å:</b> {posts_per_day}\n\n"
            f"–ö–∞–Ω–∞–ª –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!",
            parse_mode="HTML",
            reply_markup=main_menu_keyboard()
        )

    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 20")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞: {str(e)}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@router.message(Command("list_channels"))
async def list_channels(message: Message, db):
    """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤"""
    if not is_admin(message.from_user.id):
        return

    try:
        channels = await db.get_channels()

        if not channels:
            await message.answer(
                "üì∫ <b>–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤</b>\n\n"
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add_channel –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.",
                parse_mode="HTML"
            )
            return

        text = "üì∫ <b>–í–∞—à–∏ –∫–∞–Ω–∞–ª—ã:</b>\n\n"
        for i, channel in enumerate(channels, 1):
            status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if channel['is_active'] else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
            text += f"<b>{i}. {channel['channel_name']}</b>\n"
            text += f"   ID: <code>{channel['channel_id']}</code>\n"
            text += f"   –°—Ç–∞—Ç—É—Å: {status}\n"
            text += f"   –ü–æ—Å—Ç–æ–≤ –≤ –¥–µ–Ω—å: {channel['posts_per_day']}\n\n"

        text += "\n<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
        text += "/test_post [ID] - —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç\n"
        text += "/remove_channel [ID] - —É–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª"

        await message.answer(text, parse_mode="HTML")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤: {str(e)}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@router.message(Command("test_post"))
async def test_post_command(message: Message, bot: Bot, db):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞"""
    if not is_admin(message.from_user.id):
        return

    # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É
    parts = message.text.split()
    if len(parts) < 2:
        await message.answer(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>/test_post @channel</code>\n"
            "–ò–ª–∏: <code>/test_post -100xxxxxxxxx</code>",
            parse_mode="HTML"
        )
        return

    channel_id = parts[1]

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–Ω–∞–ª –≤ –ë–î
        channels = await db.get_channels()
        channel = next((ch for ch in channels if ch['channel_id'] == channel_id), None)

        if not channel:
            await message.answer(
                f"‚ùå <b>–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ</b>\n\n"
                f"–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫–∞–Ω–∞–ª: /add_channel",
                parse_mode="HTML"
            )
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç
        test_text = """
üß™ <b>–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç –æ—Ç Content Manager Bot</b>

‚úÖ –ï—Å–ª–∏ –≤—ã –≤–∏–¥–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –±–æ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!

<b>–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ:</b>
‚Ä¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–∞–Ω–∞–ª—É ‚úÖ
‚Ä¢ –ü—Ä–∞–≤–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É ‚úÖ
‚Ä¢ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ ‚úÖ

ü§ñ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø—É–±–ª–∏–∫–∞—Ü–∏—è–º!

#—Ç–µ—Å—Ç #contentmanager #–≥–æ—Ç–æ–≤–æ
        """

        sent_message = await bot.send_message(
            chat_id=channel_id,
            text=test_text,
            parse_mode="HTML"
        )

        await message.answer(
            f"‚úÖ <b>–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!</b>\n\n"
            f"<b>–ö–∞–Ω–∞–ª:</b> {channel['channel_name']}\n"
            f"<b>ID —Å–æ–æ–±—â–µ–Ω–∏—è:</b> {sent_message.message_id}\n\n"
            f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞–Ω–∞–ª - –ø–æ—Å—Ç –¥–æ–ª–∂–µ–Ω –ø–æ—è–≤–∏—Ç—å—Å—è.",
            parse_mode="HTML"
        )

    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ {channel_id}: {str(e)}")
        await message.answer(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏</b>\n\n"
            f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ.\n"
            f"–î–µ—Ç–∞–ª–∏: {str(e)}",
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞: {str(e)}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@router.message(Command("remove_channel"))
async def remove_channel_command(message: Message, db):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞"""
    if not is_admin(message.from_user.id):
        return

    parts = message.text.split()
    if len(parts) < 2:
        await message.answer(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>/remove_channel @channel</code>",
            parse_mode="HTML"
        )
        return

    channel_id = parts[1]

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
        channels = await db.get_channels()
        channel = next((ch for ch in channels if ch['channel_id'] == channel_id), None)

        if not channel:
            await message.answer(f"‚ùå –ö–∞–Ω–∞–ª {channel_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ")
            return

        # –£–¥–∞–ª—è–µ–º –∫–∞–Ω–∞–ª
        await db.delete_channel(channel_id)

        await message.answer(
            f"‚úÖ <b>–ö–∞–Ω–∞–ª —É–¥–∞–ª–µ–Ω</b>\n\n"
            f"<b>–£–¥–∞–ª–µ–Ω:</b> {channel['channel_name']}\n"
            f"<b>ID:</b> {channel_id}",
            parse_mode="HTML"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞: {str(e)}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {str(e)}")


# –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–µ–Ω—é...

@router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_statistics(message: Message, db):
    if not is_admin(message.from_user.id):
        return

    try:
        stats = await db.get_statistics()
        channels = await db.get_channels()
        sources = await db.get_news_sources()

        active_channels = len([ch for ch in channels if ch['is_active']])

        text = f"""
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>

üü¢ <b>–ë–æ—Ç:</b> –†–∞–±–æ—Ç–∞–µ—Ç
üì∫ <b>–ö–∞–Ω–∞–ª–æ–≤:</b> {len(channels)} (–∞–∫—Ç–∏–≤–Ω—ã—Ö: {active_channels})
üì∞ <b>–ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤:</b> {len(sources)}
üìù <b>–ü–æ—Å—Ç–æ–≤:</b> {stats['posts_count']}

<b>–ö–æ–º–∞–Ω–¥—ã:</b>
/add_channel - –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª
/list_channels - —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
/test_post [ID] - —Ç–µ—Å—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        """

        await message.answer(text, parse_mode="HTML")

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")


@router.message(F.text == "üì∫ –ú–æ–∏ –∫–∞–Ω–∞–ª—ã")
async def show_channels(message: Message, db):
    if not is_admin(message.from_user.id):
        return

    try:
        channels = await db.get_channels()

        if not channels:
            text = """
üì∫ <b>–ú–æ–∏ –∫–∞–Ω–∞–ª—ã</b>

‚ùå –ö–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã.

<b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞:</b>
1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add_channel
3. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º

<b>–ö–æ–º–∞–Ω–¥—ã:</b>
/add_channel - –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª
/list_channels - —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
            """
        else:
            text = f"üì∫ <b>–ö–∞–Ω–∞–ª–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {len(channels)}</b>\n\n"
            text += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /list_channels –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞"

        await message.answer(text, parse_mode="HTML")

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@router.message(F.text == "üì∞ –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π")
async def show_sources(message: Message, db):
    if not is_admin(message.from_user.id):
        return

    try:
        sources = await db.get_news_sources()

        text = f"üì∞ <b>–ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {len(sources)}</b>\n\n"
        for source in sources[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
            status = "‚úÖ" if source['is_active'] else "‚ùå"
            text += f"{status} {source['name']}\n"

        if len(sources) > 3:
            text += f"\n... –∏ –µ—â–µ {len(sources) - 3}"

        await message.answer(text, parse_mode="HTML")

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def show_settings(message: Message):
    if not is_admin(message.from_user.id):
        return

    await message.answer(
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
        "üé® –°—Ç–∏–ª—å: –ü—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π\n"
        "‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª: 3 —á–∞—Å–∞\n"
        "üìä –ü–æ—Å—Ç–æ–≤ –≤ –¥–µ–Ω—å: 5\n\n"
        "–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...",
        parse_mode="HTML"
    )


@router.message(F.text == "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é")
async def start_publication(message: Message, db, content_manager):
    if not is_admin(message.from_user.id):
        return

    try:
        channels = await db.get_channels()
        if not channels:
            await message.answer(
                "‚ö†Ô∏è <b>–ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤</b>\n\n"
                "–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫–∞–Ω–∞–ª—ã: /add_channel",
                parse_mode="HTML"
            )
            return

        await message.answer("üîÑ –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π...")
        await content_manager.process_and_publish_news()
        await message.answer("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@router.message()
async def handle_all(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    current_state = await state.get_state()
    if current_state:
        return  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è

    await message.answer(
        f"–ü–æ–ª—É—á–∏–ª: {message.text}\n\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –∫–æ–º–∞–Ω–¥",
        reply_markup=main_menu_keyboard()
    )


@router.callback_query()
async def handle_callbacks(callback: CallbackQuery):
    await callback.answer("–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")


@router.message(Command("test_parsing"))
async def test_parsing_command(message: Message, db):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–æ–≤–æ—Å—Ç–µ–π"""
    if not is_admin(message.from_user.id):
        return

    await message.answer("üîÑ <b>–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–æ–≤–æ—Å—Ç–µ–π...</b>", parse_mode="HTML")

    try:
        from services.news_parser import NewsParser

        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        sources = await db.get_news_sources()
        if not sources:
            await message.answer("‚ùå –ù–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –Ω–æ–≤–æ—Å—Ç–µ–π –≤ –±–∞–∑–µ")
            return

        total_news = 0
        results = []

        async with NewsParser() as parser:
            for source in sources[:3]:  # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 3 –∏—Å—Ç–æ—á–Ω–∏–∫–∞
                result = await parser.test_source(source['url'], source['name'])
                total_news += result['news_count']

                status = "‚úÖ" if result['success'] else "‚ùå"
                results.append(f"{status} <b>{source['name']}</b>: {result['news_count']} –Ω–æ–≤–æ—Å—Ç–µ–π")

        result_text = f"""
üß™ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞</b>

<b>–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:</b> {len(results)}
<b>–í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ—Å—Ç–µ–π:</b> {total_news}

<b>–î–µ—Ç–∞–ª–∏:</b>
{chr(10).join(results)}

{f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!" if total_news > 0 else "‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π"}
        """

        await message.answer(result_text, parse_mode="HTML")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞: {str(e)}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")


@router.message(Command("test_ai"))
async def test_ai_command(message: Message, content_manager):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ò–ò –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    if not is_admin(message.from_user.id):
        return

    await message.answer("ü§ñ <b>–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ò–ò –æ–±—Ä–∞–±–æ—Ç–∫–∏...</b>", parse_mode="HTML")

    try:
        result = await content_manager.test_ai_processing()

        if result['success']:
            response = f"""
‚úÖ <b>–ò–ò —Ç–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω!</b>

<b>–ò—Å—Ö–æ–¥–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫:</b>
{result['original_title']}

<b>–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç:</b>
{result['processed_content']}

<b>–°—Ç–∏–ª—å:</b> {result['style']}
<b>–•–µ—à—Ç–µ–≥–∏:</b> {' '.join(result['hashtags'])}

üéâ –ò–ò –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!
            """
        else:
            response = f"""
‚ùå <b>–û—à–∏–±–∫–∞ –ò–ò —Ç–µ—Å—Ç–∞</b>

{result['error']}

–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ OpenAI API –∫–ª—é—á–∞.
            """

        await message.answer(response, parse_mode="HTML")

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ò–ò: {str(e)}")


# –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–∏ –∫–æ–º–∞–Ω–¥—ã –≤ handlers/admin.py –≤ –∫–æ–Ω—Ü–µ —Ñ–∞–π–ª–∞

# –î–û–ë–ê–í–¨–¢–ï –≠–¢–û –í –ö–û–ù–ï–¶ –§–ê–ô–õ–ê handlers/admin.py
# (–∑–∞–º–µ–Ω—è–µ—Ç —Å—Ç—Ä–æ–∫–∏ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ñ—É–Ω–∫—Ü–∏–∏)

@router.message(Command("scheduler_status"))
async def scheduler_status_command(message: Message, scheduler):
    """–°—Ç–∞—Ç—É—Å –Ω–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
    if not is_admin(message.from_user.id):
        return

    try:
        status = scheduler.get_scheduler_status()
        jobs = scheduler.get_scheduled_jobs()

        text = f"""
üîÑ <b>–°—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞:</b>

<b>–û–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:</b>
‚Ä¢ –†–∞–±–æ—Ç–∞–µ—Ç: {'‚úÖ –î–∞' if status['running'] else '‚ùå –ù–µ—Ç'}
‚Ä¢ –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {status['total_jobs']}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {status['active_jobs']}
‚Ä¢ –û–∂–∏–¥–∞—é—â–∏—Ö: {status['pending_jobs']}

<b>–°–ª–µ–¥—É—é—â–µ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ:</b>
‚Ä¢ –í—Ä–µ–º—è: {status['next_execution'] or '–ù–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ'}
‚Ä¢ –ó–∞–¥–∞—á–∞: {status['next_job_name'] or '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á'}

<b>–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:</b>
        """

        if jobs:
            for job in jobs[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                status_emoji = {
                    'pending': '‚è≥',
                    'running': '‚ö°',
                    'completed': '‚úÖ',
                    'failed': '‚ùå',
                    'cancelled': 'üö´'
                }.get(job['status'], '‚ùì')

                text += f"\n{status_emoji} {job['name']}"
                if job['next_run']:
                    run_time = job['next_run'][:16].replace('T', ' ')
                    text += f"\n   üìÖ {run_time}"
        else:
            text += "\n‚ùå –ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á"

        await message.answer(text, parse_mode="HTML")

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {str(e)}")


@router.message(Command("quick_schedule"))
async def quick_schedule_command(message: Message, scheduler):
    """–ë—ã—Å—Ç—Ä–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–π"""
    if not is_admin(message.from_user.id):
        return

    try:
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞
        times = ['09:00', '15:00', '21:00']
        job_ids = scheduler.schedule_daily_posts(times)

        text = f"""
‚ö° <b>–ë—ã—Å—Ç—Ä–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:</b>

‚úÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:
‚Ä¢ üåÖ 09:00 - —É—Ç—Ä–µ–Ω–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏
‚Ä¢ üåû 15:00 - –¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞  
‚Ä¢ üåô 21:00 - –≤–µ—á–µ—Ä–Ω–∏–π –æ–±–∑–æ—Ä

<b>–°–æ–∑–¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:</b>
        """

        for i, job_id in enumerate(job_ids):
            text += f"\n‚Ä¢ {times[i]}: {job_id[:8]}..."

        text += f"\n\nüìä –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /scheduler_status –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"

        await message.answer(text, parse_mode="HTML")

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")


@router.message(Command("schedule_test"))
async def schedule_test_command(message: Message, scheduler):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
    if not is_admin(message.from_user.id):
        return

    try:
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É
        from datetime import datetime, timedelta

        test_times = [(datetime.now() + timedelta(minutes=1)).strftime('%H:%M')]
        job_ids = scheduler.schedule_daily_posts(test_times)

        await message.answer(
            f"üß™ <b>–¢–µ—Å—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞:</b>\n\n"
            f"‚úÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É\n"
            f"üÜî ID –∑–∞–¥–∞—á–∏: {job_ids[0][:8]}...\n\n"
            f"–°–ª–µ–¥–∏—Ç–µ –∑–∞ –ª–æ–≥–∞–º–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /scheduler_status",
            parse_mode="HTML"
        )

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")


@router.message(Command("upgrade_status"))
async def upgrade_status_command(message: Message, scheduler):
    """–°—Ç–∞—Ç—É—Å –∞–ø–≥—Ä–µ–π–¥–∞ –¥–æ –ò–ò-–∞–≥–µ–Ω—Ç–∞"""
    if not is_admin(message.from_user.id):
        return

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        scheduler_ok = scheduler.running if scheduler else False

        components = {
            "üîÑ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫": "‚úÖ Upgraded" if scheduler_ok else "‚ùå Failed",
            "üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥": "‚è≥ Pending",
            "üß† –ò–ò –æ–±—Ä–∞–±–æ—Ç–∫–∞": "‚è≥ Pending",
            "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞": "‚è≥ Pending"
        }

        completed = sum(1 for status in components.values() if "‚úÖ" in status)
        total = len(components)
        progress = f"{completed}/{total} ({completed / total * 100:.0f}%)"

        text = f"""
üöÄ <b>–ü—Ä–æ–≥—Ä–µ—Å—Å –∞–ø–≥—Ä–µ–π–¥–∞ –¥–æ –ò–ò-–∞–≥–µ–Ω—Ç–∞:</b>

{chr(10).join(f"{component}: {status}" for component, status in components.items())}

<b>üìà –û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å:</b> {progress}

<b>üéØ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:</b>
‚Ä¢ ‚è≥ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
‚Ä¢ ‚è≥ –£–ª—É—á—à–µ–Ω–∏–µ –ò–ò –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
‚Ä¢ ‚è≥ –í–Ω–µ–¥—Ä–µ–Ω–∏–µ ML –∞–Ω–∞–ª–∏—Ç–∏–∫–∏

<b>üìä –°—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞:</b>
‚Ä¢ –ó–∞–¥–∞—á –≤ —Å–∏—Å—Ç–µ–º–µ: {len(scheduler.jobs) if scheduler else 0}
‚Ä¢ –°—Ç–∞—Ç—É—Å: {'üü¢ –†–∞–±–æ—Ç–∞–µ—Ç' if scheduler_ok else 'üî¥ –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç'}
        """

        await message.answer(text, parse_mode="HTML")

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {str(e)}")


# –î–û–ë–ê–í–¨–¢–ï –≠–¢–ò –ö–û–ú–ê–ù–î–´ –í –ö–û–ù–ï–¶ handlers/admin.py

@router.message(Command("system_status"))
async def system_status_command(message: Message, monitor):
    """–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º"""
    if not is_admin(message.from_user.id):
        return

    try:
        status = monitor.get_system_status()

        text = f"""
{status['emoji']} <b>–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã: {status['status'].upper()}</b>

<b>üìä –†–µ—Å—É—Ä—Å—ã:</b>
‚Ä¢ CPU: {status['cpu_percent']:.1f}%
‚Ä¢ –ü–∞–º—è—Ç—å: {status['memory_percent']:.1f}%
‚Ä¢ –î–∏—Å–∫: {status['disk_percent']:.1f}%

<b>üö® –ê–ª–µ—Ä—Ç—ã:</b>
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {status['active_alerts_count']}
‚Ä¢ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö: {status['critical_alerts']}

<b>üõ†Ô∏è –ê–≤—Ç–æ–∏—Å—Ü–µ–ª–µ–Ω–∏–µ:</b>
‚Ä¢ –î–µ–π—Å—Ç–≤–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {sum(status['healing_actions'].values())}
‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: {'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' if status['monitoring_active'] else 'üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}

<b>üïê –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞:</b> {status['last_check'][:19].replace('T', ' ')}
        """

        await message.answer(text, parse_mode="HTML")

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {str(e)}")


@router.message(Command("metrics"))
async def metrics_command(message: Message, monitor):
    """–î–µ—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
    if not is_admin(message.from_user.id):
        return

    try:
        summary = monitor.get_metrics_summary(hours=1)

        if not summary:
            await message.answer("üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫")
            return

        text = f"""
üìä <b>–ú–µ—Ç—Ä–∏–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å:</b>

<b>üñ•Ô∏è CPU:</b>
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ: {summary['cpu']['avg']:.1f}%
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º: {summary['cpu']['max']:.1f}%
‚Ä¢ –ú–∏–Ω–∏–º—É–º: {summary['cpu']['min']:.1f}%

<b>üß† –ü–∞–º—è—Ç—å:</b>
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ: {summary['memory']['avg']:.1f}%
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º: {summary['memory']['max']:.1f}%
‚Ä¢ –ú–∏–Ω–∏–º—É–º: {summary['memory']['min']:.1f}%

<b>üíæ –î–∏—Å–∫:</b>
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ: {summary['disk']['avg']:.1f}%
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º: {summary['disk']['max']:.1f}%
‚Ä¢ –ú–∏–Ω–∏–º—É–º: {summary['disk']['min']:.1f}%

<b>üìà –¢–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö:</b> {summary['data_points']}
        """

        await message.answer(text, parse_mode="HTML")

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫: {str(e)}")


@router.message(Command("alerts"))
async def alerts_command(message: Message, monitor):
    """–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤"""
    if not is_admin(message.from_user.id):
        return

    try:
        active_alerts = [a for a in monitor.active_alerts.values() if not a.resolved]

        if not active_alerts:
            await message.answer("‚úÖ <b>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤</b>\n\n–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ!", parse_mode="HTML")
            return

        text = "üö® <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã:</b>\n\n"

        for alert in sorted(active_alerts, key=lambda x: x.timestamp, reverse=True)[:10]:
            level_emoji = {
                'info': '‚ÑπÔ∏è',
                'warning': '‚ö†Ô∏è',
                'error': '‚ùå',
                'critical': 'üî¥'
            }.get(alert.level, '‚ùì')

            time_str = alert.timestamp.strftime('%H:%M')
            text += f"{level_emoji} <b>{alert.title}</b>\n"
            text += f"   {alert.message}\n"
            text += f"   üïê {time_str}\n\n"

        if len(active_alerts) > 10:
            text += f"... –∏ –µ—â–µ {len(active_alerts) - 10} –∞–ª–µ—Ä—Ç–æ–≤"

        await message.answer(text, parse_mode="HTML")

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–æ–≤: {str(e)}")


@router.message(Command("health_check"))
async def health_check_command(message: Message, monitor, scheduler, db):
    """–ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
    if not is_admin(message.from_user.id):
        return

    try:
        await message.answer("üîç <b>–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è...</b>", parse_mode="HTML")

        checks = []

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        monitor_status = "‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç" if monitor.running else "‚ùå –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        checks.append(f"üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: {monitor_status}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        scheduler_status = "‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç" if scheduler.running else "‚ùå –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        jobs_count = len(scheduler.jobs)
        checks.append(f"üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: {scheduler_status} ({jobs_count} –∑–∞–¥–∞—á)")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ë–î
        try:
            channels = await db.get_channels()
            db_status = f"‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç ({len(channels)} –∫–∞–Ω–∞–ª–æ–≤)"
        except Exception as e:
            db_status = f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:30]}"
        checks.append(f"üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {db_status}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π
        try:
            sources = await db.get_news_sources()
            active_sources = len([s for s in sources if s['is_active']])
            sources_status = f"‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç ({active_sources} –∞–∫—Ç–∏–≤–Ω—ã—Ö)"
        except Exception as e:
            sources_status = f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:30]}"
        checks.append(f"üì∞ –ò—Å—Ç–æ—á–Ω–∏–∫–∏: {sources_status}")

        # –ü–æ–ª—É—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        system_status = monitor.get_system_status()

        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∑–¥–æ—Ä–æ–≤—å–µ
        healthy_checks = sum(1 for check in checks if "‚úÖ" in check)
        total_checks = len(checks)
        health_score = int((healthy_checks / total_checks) * 100)

        # –£—á–∏—Ç—ã–≤–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã
        if system_status['cpu_percent'] > 80:
            health_score -= 10
        if system_status['memory_percent'] > 80:
            health_score -= 10
        if system_status['critical_alerts'] > 0:
            health_score -= 20

        health_score = max(0, min(100, health_score))

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        if health_score >= 90:
            overall_emoji = "üü¢"
            overall_status = "–û–¢–õ–ò–ß–ù–û"
        elif health_score >= 70:
            overall_emoji = "üü°"
            overall_status = "–•–û–†–û–®–û"
        elif health_score >= 50:
            overall_emoji = "üü†"
            overall_status = "–£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û"
        else:
            overall_emoji = "üî¥"
            overall_status = "–ö–†–ò–¢–ò–ß–ù–û"

        text = f"""
{overall_emoji} <b>–ó–î–û–†–û–í–¨–ï –°–ò–°–¢–ï–ú–´: {health_score}% - {overall_status}</b>

<b>üîß –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:</b>
{chr(10).join(checks)}

<b>üìä –†–µ—Å—É—Ä—Å—ã:</b>
‚Ä¢ CPU: {system_status['cpu_percent']:.1f}%
‚Ä¢ –ü–∞–º—è—Ç—å: {system_status['memory_percent']:.1f}%
‚Ä¢ –î–∏—Å–∫: {system_status['disk_percent']:.1f}%

<b>üö® –ê–ª–µ—Ä—Ç—ã:</b>
‚Ä¢ –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö: {system_status['active_alerts_count']}
‚Ä¢ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö: {system_status['critical_alerts']}

<b>üõ†Ô∏è –ê–≤—Ç–æ–∏—Å—Ü–µ–ª–µ–Ω–∏–µ:</b>
{chr(10).join([f"‚Ä¢ {action}: {count}x" for action, count in system_status['healing_actions'].items()]) or "‚Ä¢ –ù–µ —Ç—Ä–µ–±–æ–≤–∞–ª–æ—Å—å"}

<b>üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>
        """

        if health_score < 70:
            text += "\n‚Ä¢ ‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã"
        if system_status['cpu_percent'] > 80:
            text += "\n‚Ä¢ üñ•Ô∏è –í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ CPU"
        if system_status['memory_percent'] > 80:
            text += "\n‚Ä¢ üß† –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏"
        if system_status['critical_alerts'] > 0:
            text += "\n‚Ä¢ üö® –ï—Å—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∞–ª–µ—Ä—Ç—ã"
        if health_score >= 90:
            text += "\nüéâ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–¥–µ–∞–ª—å–Ω–æ!"

        await message.answer(text, parse_mode="HTML")

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è: {str(e)}")


@router.message(Command("force_healing"))
async def force_healing_command(message: Message, monitor):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∞–≤—Ç–æ–∏—Å—Ü–µ–ª–µ–Ω–∏–µ"""
    if not is_admin(message.from_user.id):
        return

    try:
        await message.answer("üõ†Ô∏è <b>–ó–∞–ø—É—Å–∫ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–≤—Ç–æ–∏—Å—Ü–µ–ª–µ–Ω–∏—è...</b>", parse_mode="HTML")

        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∞–ª–µ—Ä—Ç—ã –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏—Å—Ü–µ–ª–µ–Ω–∏—è
        import gc

        actions_taken = []

        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞
        collected = gc.collect()
        actions_taken.append(f"üßπ –°–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞: {collected} –æ–±—ä–µ–∫—Ç–æ–≤")

        # –û—á–∏—Å—Ç–∫–∞ –º–µ—Ç—Ä–∏–∫
        if len(monitor.system_metrics) > 100:
            while len(monitor.system_metrics) > 100:
                monitor.system_metrics.popleft()
            actions_taken.append("üìä –û—á–∏—â–µ–Ω—ã —Å—Ç–∞—Ä—ã–µ –º–µ—Ç—Ä–∏–∫–∏")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        if monitor.scheduler and not monitor.scheduler.running:
            await monitor._heal_scheduler()
            actions_taken.append("üìÖ –ü–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ë–î
        try:
            await monitor.db.get_setting('health_check')
            actions_taken.append("üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞")
        except:
            await monitor._heal_database()
            actions_taken.append("üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

        text = f"""
‚úÖ <b>–ê–≤—Ç–æ–∏—Å—Ü–µ–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!</b>

<b>üõ†Ô∏è –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</b>
{chr(10).join(actions_taken)}

<b>üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:</b>
‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞
‚Ä¢ –†–µ—Å—É—Ä—Å—ã –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã
‚Ä¢ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /system_status –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.
        """

        await message.answer(text, parse_mode="HTML")

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–∏—Å—Ü–µ–ª–µ–Ω–∏—è: {str(e)}")


# –û–ë–ù–û–í–õ–Ø–ï–ú –∫–æ–º–∞–Ω–¥—É /upgrade_status –¥–ª—è —É—á–µ—Ç–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
@router.message(Command("upgrade_status"))
async def upgrade_status_command(message: Message, scheduler=None, monitor=None):
    """–°—Ç–∞—Ç—É—Å –∞–ø–≥—Ä–µ–π–¥–∞ –¥–æ –ò–ò-–∞–≥–µ–Ω—Ç–∞"""
    if not is_admin(message.from_user.id):
        return

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        scheduler_ok = scheduler.running if scheduler else False
        monitoring_ok = monitor.running if monitor else False

        components = {
            "üîÑ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫": "‚úÖ Upgraded" if scheduler_ok else "‚ùå Failed",
            "üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥": "‚úÖ Upgraded" if monitoring_ok else "‚ùå Pending",
            "üß† –ò–ò –æ–±—Ä–∞–±–æ—Ç–∫–∞": "‚è≥ Pending",
            "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞": "‚è≥ Pending"
        }

        completed = sum(1 for status in components.values() if "‚úÖ" in status)
        total = len(components)
        progress = f"{completed}/{total} ({completed / total * 100:.0f}%)"

        text = f"""
üöÄ <b>–ü—Ä–æ–≥—Ä–µ—Å—Å –∞–ø–≥—Ä–µ–π–¥–∞ –¥–æ –ò–ò-–∞–≥–µ–Ω—Ç–∞:</b>

{chr(10).join(f"{component}: {status}" for component, status in components.items())}

<b>üìà –û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å:</b> {progress}

<b>üéØ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:</b>
‚Ä¢ ‚è≥ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
‚Ä¢ ‚è≥ –£–ª—É—á—à–µ–Ω–∏–µ –ò–ò –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
‚Ä¢ ‚è≥ –í–Ω–µ–¥—Ä–µ–Ω–∏–µ ML –∞–Ω–∞–ª–∏—Ç–∏–∫–∏

<b>üìä –°—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:</b>
‚Ä¢ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: {'üü¢ –†–∞–±–æ—Ç–∞–µ—Ç' if scheduler_ok else 'üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}
‚Ä¢ –ó–∞–¥–∞—á –≤ —Å–∏—Å—Ç–µ–º–µ: {len(scheduler.jobs) if scheduler else 0}
‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: {'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' if monitoring_ok else 'üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}

<b>üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</b>
–°–µ–π—á–∞—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ! 
–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥ - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.
        """

        await message.answer(text, parse_mode="HTML")

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {str(e)}")


# –î–û–ë–ê–í–¨–¢–ï —ç—Ç—É –ø—Ä–æ—Å—Ç—É—é –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:
@router.message(Command("test_monitor"))
async def test_monitor_command(message: Message):
    """–¢–µ—Å—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    if not is_admin(message.from_user.id):
        return

    try:
        import psutil

        # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        cpu = psutil.cpu_percent(interval=1)
        memory = psutil.virtual_memory()

        text = f"""
üîç <b>–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:</b>

<b>üìä –¢–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏:</b>
‚Ä¢ CPU: {cpu:.1f}%
‚Ä¢ –ü–∞–º—è—Ç—å: {memory.percent:.1f}%
‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ –ø–∞–º—è—Ç–∏: {memory.available // (1024 ** 3):.1f} GB

<b>‚úÖ –°—Ç–∞—Ç—É—Å:</b>
‚Ä¢ psutil –±–∏–±–ª–∏–æ—Ç–µ–∫–∞: –†–∞–±–æ—Ç–∞–µ—Ç
‚Ä¢ –°–±–æ—Ä –º–µ—Ç—Ä–∏–∫: –£—Å–ø–µ—à–Ω–æ
‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥—É

<b>üéØ –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥:</b>
–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª–Ω—É—é —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        """

        await message.answer(text, parse_mode="HTML")

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")


# –û–ë–ù–û–í–õ–Ø–ï–ú –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ
@router.message(Command("start"))
async def start_command(message: Message, state: FSMContext, scheduler, monitor):
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    await state.clear()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    scheduler_status = "‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç" if scheduler and scheduler.running else "‚ùå –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    monitor_status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if monitor and monitor.running else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
    jobs_count = len(scheduler.jobs) if scheduler else 0

    welcome_text = f"""
ü§ñ <b>Content Manager Bot v2.0 - Enterprise Edition</b>

‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!
‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞
‚úÖ –í—Å–µ –º–æ–¥—É–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã
{scheduler_status} –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ ({jobs_count} –∑–∞–¥–∞—á)
{monitor_status} –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞

<b>üÜï Enterprise –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>
‚Ä¢ üìÖ –ü–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å retry –ª–æ–≥–∏–∫–æ–π
‚Ä¢ üîç Real-time –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤
‚Ä¢ üõ†Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å—Ü–µ–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º
‚Ä¢ üö® –°–∏—Å—Ç–µ–º–∞ –∞–ª–µ—Ä—Ç–æ–≤ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
‚Ä¢ üìä –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏

<b>üîç –ö–æ–º–∞–Ω–¥—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:</b>
/system_status - —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
/health_check - –ø–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
/metrics - –º–µ—Ç—Ä–∏–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
/alerts - –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã

<b>üìÖ –ö–æ–º–∞–Ω–¥—ã –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞:</b>
/scheduler_status - —Å—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
/quick_schedule - –±—ã—Å—Ç—Ä–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
/schedule_test - —Ç–µ—Å—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞

<b>üìä –ö–æ–º–∞–Ω–¥—ã –∞–ø–≥—Ä–µ–π–¥–∞:</b>
/upgrade_status - –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–æ –ò–ò-–∞–≥–µ–Ω—Ç–∞
/force_healing - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∏—Å—Ü–µ–ª–µ–Ω–∏–µ

<b>üì∫ –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/add_channel - –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª
/list_channels - —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
/test_post - —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:
    """

    await message.answer(
        welcome_text,
        parse_mode="HTML",
        reply_markup=main_menu_keyboard()
    )