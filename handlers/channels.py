from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.exceptions import TelegramAPIError
import logging
import re

from utils.keyboards import (
    channels_management_keyboard, channel_list_keyboard,
    channel_actions_keyboard, confirmation_keyboard,
    cancel_keyboard, main_menu_keyboard
)
from database.models import DatabaseModels
from config import ADMIN_ID

logger = logging.getLogger(__name__)
router = Router()


class ChannelStates(StatesGroup):
    waiting_for_channel_id = State()
    waiting_for_channel_name = State()
    waiting_for_posts_per_day = State()
    waiting_for_channel_settings = State()


def is_admin(user_id: int) -> bool:
    return user_id == ADMIN_ID


@router.message(F.text == "üì∫ –ú–æ–∏ –∫–∞–Ω–∞–ª—ã")
async def show_channels_menu(message: Message):
    """–ü–æ–∫–∞–∑ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞–º–∏"""
    if not is_admin(message.from_user.id):
        return

    await message.answer(
        "üì∫ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏</b>\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å, –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞—à–∏–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.",
        parse_mode="HTML",
        reply_markup=channels_management_keyboard()
    )


@router.callback_query(F.data == "list_channels")
async def show_channels_list(callback: CallbackQuery, db: DatabaseModels):
    """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤"""
    try:
        channels = await db.get_channels()

        if not channels:
            await callback.message.edit_text(
                "üì∫ <b>–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤</b>\n\n"
                "‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.\n"
                "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤—ã–π –∫–∞–Ω–∞–ª.",
                parse_mode="HTML",
                reply_markup=channels_management_keyboard()
            )
            return

        text = "üì∫ <b>–í–∞—à–∏ –∫–∞–Ω–∞–ª—ã:</b>\n\n"
        for channel in channels:
            status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if channel['is_active'] else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
            text += f"<b>{channel['channel_name']}</b>\n"
            text += f"ID: <code>{channel['channel_id']}</code>\n"
            text += f"–°—Ç–∞—Ç—É—Å: {status}\n"
            text += f"–ü–æ—Å—Ç–æ–≤ –≤ –¥–µ–Ω—å: {channel['posts_per_day']}\n\n"

        await callback.message.edit_text(
            text,
            parse_mode="HTML",
            reply_markup=channel_list_keyboard(channels)
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤: {str(e)}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤")


@router.callback_query(F.data == "add_channel")
async def start_add_channel(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞"""
    await state.set_state(ChannelStates.waiting_for_channel_id)

    await callback.message.edit_text(
        "‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –∫–∞–Ω–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "‚Ä¢ <code>@channel_username</code> (–¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤)\n"
        "‚Ä¢ <code>-100xxxxxxxxx</code> (–¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤)\n\n"
        "‚ùóÔ∏è <b>–í–∞–∂–Ω–æ:</b> –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å –ø—Ä–∞–≤–∞–º–∏ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π.",
        parse_mode="HTML",
        reply_markup=cancel_keyboard()
    )


@router.message(StateFilter(ChannelStates.waiting_for_channel_id))
async def process_channel_id(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ ID –∫–∞–Ω–∞–ª–∞"""
    if not is_admin(message.from_user.id):
        return

    channel_id = message.text.strip()

    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ ID –∫–∞–Ω–∞–ª–∞
    if not (channel_id.startswith('@') or channel_id.startswith('-100')):
        await message.answer(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∫–∞–Ω–∞–ª–∞</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
            "‚Ä¢ <code>@channel_username</code> –¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤\n"
            "‚Ä¢ <code>-100xxxxxxxxx</code> –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤",
            parse_mode="HTML"
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É
    try:
        chat = await bot.get_chat(channel_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞
        bot_member = await bot.get_chat_member(channel_id, bot.id)
        if bot_member.status not in ['administrator', 'creator']:
            await message.answer(
                "‚ùå <b>–ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
                "–î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –ø—Ä–∞–≤–∞–º–∏ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π.",
                parse_mode="HTML"
            )
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞
        await state.update_data({
            'channel_id': channel_id,
            'channel_name': chat.title or chat.username or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'
        })

        await state.set_state(ChannelStates.waiting_for_posts_per_day)

        await message.answer(
            f"‚úÖ <b>–ö–∞–Ω–∞–ª –Ω–∞–π–¥–µ–Ω!</b>\n\n"
            f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {chat.title or chat.username}\n"
            f"<b>ID:</b> <code>{channel_id}</code>\n\n"
            f"–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –≤ –¥–µ–Ω—å –¥–ª—è —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞ (–æ—Ç 1 –¥–æ 20):",
            parse_mode="HTML",
            reply_markup=cancel_keyboard()
        )

    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É {channel_id}: {str(e)}")
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É</b>\n\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n"
            "‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å ID –∫–∞–Ω–∞–ª–∞\n"
            "‚Ä¢ –ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n"
            "‚Ä¢ –£ –±–æ—Ç–∞ –µ—Å—Ç—å –ø—Ä–∞–≤–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π",
            parse_mode="HTML"
        )


@router.message(StateFilter(ChannelStates.waiting_for_posts_per_day))
async def process_posts_per_day(message: Message, state: FSMContext, db: DatabaseModels):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Å—Ç–æ–≤ –≤ –¥–µ–Ω—å"""
    if not is_admin(message.from_user.id):
        return

    try:
        posts_per_day = int(message.text.strip())

        if posts_per_day < 1 or posts_per_day > 20:
            await message.answer(
                "‚ùå <b>–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ</b>\n\n"
                "–£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 20.",
                parse_mode="HTML"
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        channel_id = data['channel_id']
        channel_name = data['channel_name']

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–Ω–∞–ª –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await db.add_channel(channel_id, channel_name, posts_per_day)

        await state.clear()

        await message.answer(
            f"‚úÖ <b>–ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
            f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {channel_name}\n"
            f"<b>ID:</b> <code>{channel_id}</code>\n"
            f"<b>–ü–æ—Å—Ç–æ–≤ –≤ –¥–µ–Ω—å:</b> {posts_per_day}\n\n"
            f"–ö–∞–Ω–∞–ª –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!",
            parse_mode="HTML",
            reply_markup=channels_management_keyboard()
        )

    except ValueError:
        await message.answer(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 20.",
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞: {str(e)}")
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            parse_mode="HTML"
        )


@router.callback_query(F.data.startswith("channel_"))
async def show_channel_details(callback: CallbackQuery, db: DatabaseModels):
    """–ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª–µ–π –∫–∞–Ω–∞–ª–∞ –∏ –¥–µ–π—Å—Ç–≤–∏–π —Å –Ω–∏–º"""
    channel_id = callback.data.split("_", 1)[1]

    try:
        channels = await db.get_channels()
        channel = next((ch for ch in channels if ch['channel_id'] == channel_id), None)

        if not channel:
            await callback.answer("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if channel['is_active'] else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
        last_post = channel['last_post_time'] or "–ù–∏–∫–æ–≥–¥–∞"

        text = f"""
üì∫ <b>{channel['channel_name']}</b>

<b>ID:</b> <code>{channel_id}</code>
<b>–°—Ç–∞—Ç—É—Å:</b> {status}
<b>–ü–æ—Å—Ç–æ–≤ –≤ –¥–µ–Ω—å:</b> {channel['posts_per_day']}
<b>–ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ—Å—Ç:</b> {last_post}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
        """

        await callback.message.edit_text(
            text,
            parse_mode="HTML",
            reply_markup=channel_actions_keyboard(channel_id, channel['is_active'])
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–∞: {str(e)}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–∞")


@router.callback_query(F.data.startswith("stats_"))
async def show_channel_stats(callback: CallbackQuery, db: DatabaseModels):
    """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–Ω–∞–ª–∞"""
    channel_id = callback.data.split("_", 1)[1]

    try:
        stats = await db.get_statistics(channel_id)

        text = f"""
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–Ω–∞–ª–∞</b>

<b>–í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤:</b> {stats['posts_count']}
<b>–û–±—â–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã:</b> {stats['total_views']}
<b>–°—Ä–µ–¥–Ω–∏–π –æ—Ö–≤–∞—Ç:</b> {stats['total_views'] // max(stats['posts_count'], 1)}

<b>–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:</b>
‚Ä¢ –ü–æ—Å—Ç–æ–≤: {stats.get('week_posts', 0)}
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {stats.get('week_views', 0)}

<b>–ó–∞ —Å–µ–≥–æ–¥–Ω—è:</b>
‚Ä¢ –ü–æ—Å—Ç–æ–≤: {stats.get('today_posts', 0)}
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {stats.get('today_views', 0)}
        """

        await callback.message.edit_text(
            text,
            parse_mode="HTML",
            reply_markup=channel_actions_keyboard(channel_id, True)
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")


@router.callback_query(F.data.startswith("settings_"))
async def show_channel_settings(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–∞–Ω–∞–ª–∞"""
    channel_id = callback.data.split("_", 1)[1]

    await state.set_state(ChannelStates.waiting_for_channel_settings)
    await state.update_data({'channel_id': channel_id})

    text = """
‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞</b>

–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?

‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –≤ –¥–µ–Ω—å
‚Ä¢ –°—Ç–∏–ª—å –ø—É–±–ª–∏–∫–∞—Ü–∏–π
‚Ä¢ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫–∞–Ω–∞–ª–∞
‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–æ–º–∞–Ω–¥:
<code>/posts [—á–∏—Å–ª–æ]</code> - –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤
<code>/style [—Å—Ç–∏–ª—å]</code> - –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∏–ª—å (neutral/engaging/formal/casual)
<code>/schedule [–≤—Ä–µ–º—è]</code> - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    """

    await callback.message.edit_text(
        text,
        parse_mode="HTML",
        reply_markup=cancel_keyboard()
    )


@router.message(StateFilter(ChannelStates.waiting_for_channel_settings))
async def process_channel_settings(message: Message, state: FSMContext, db: DatabaseModels):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–∞–Ω–∞–ª–∞"""
    if not is_admin(message.from_user.id):
        return

    data = await state.get_data()
    channel_id = data['channel_id']
    text = message.text.strip()

    try:
        if text.startswith('/posts '):
            # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Å—Ç–æ–≤
            posts_count = int(text.split()[1])
            if 1 <= posts_count <= 20:
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –µ—Å—Ç—å —Ç–∞–∫–æ–π –º–µ—Ç–æ–¥)
                # await db.update_channel_posts_per_day(channel_id, posts_count)
                await message.answer(
                    f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {posts_count}",
                    reply_markup=main_menu_keyboard()
                )
            else:
                await message.answer("‚ùå –ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 20")
                return

        elif text.startswith('/style '):
            # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∏–ª—è
            style = text.split()[1].lower()
            styles = ['neutral', 'engaging', 'formal', 'casual']
            if style in styles:
                await db.set_setting(f"channel_style_{channel_id}", style)
                await message.answer(
                    f"‚úÖ –°—Ç–∏–ª—å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {style}",
                    reply_markup=main_menu_keyboard()
                )
            else:
                await message.answer(f"‚ùå –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∏–ª–∏: {', '.join(styles)}")
                return

        elif text.startswith('/schedule '):
            # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
            schedule_time = text.split()[1]
            await db.set_setting(f"channel_schedule_{channel_id}", schedule_time)
            await message.answer(
                f"‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {schedule_time}",
                reply_markup=main_menu_keyboard()
            )
        else:
            await message.answer(
                "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /posts, /style –∏–ª–∏ /schedule"
            )
            return

        await state.clear()

    except (ValueError, IndexError):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞: {str(e)}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫")


@router.callback_query(F.data.startswith("test_post_"))
async def send_test_post(callback: CallbackQuery, bot: Bot):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª"""
    channel_id = callback.data.split("_", 2)[2]

    try:
        test_message = """
üß™ <b>–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç</b>

–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞.

‚úÖ –ï—Å–ª–∏ –≤—ã –≤–∏–¥–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –±–æ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –º–æ–∂–µ—Ç –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤ –∫–∞–Ω–∞–ª.

ü§ñ Content Manager Bot —Ä–∞–±–æ—Ç–∞–µ—Ç!

#—Ç–µ—Å—Ç #–±–æ—Ç #—Ä–∞–±–æ—Ç–∞–µ—Ç
        """

        await bot.send_message(
            chat_id=channel_id,
            text=test_message,
            parse_mode="HTML"
        )

        await callback.answer("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")

    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞: {str(e)}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ.")


@router.callback_query(F.data.startswith("activate_"))
async def activate_channel(callback: CallbackQuery, db: DatabaseModels):
    """–ê–∫—Ç–∏–≤–∞—Ü–∏—è –∫–∞–Ω–∞–ª–∞"""
    channel_id = callback.data.split("_", 1)[1]

    try:
        await db.update_channel_status(channel_id, True)
        await callback.answer("‚úÖ –ö–∞–Ω–∞–ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")

        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        await show_channel_details(callback, db)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–∞: {str(e)}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–∞")


@router.callback_query(F.data.startswith("deactivate_"))
async def deactivate_channel(callback: CallbackQuery, db: DatabaseModels):
    """–î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –∫–∞–Ω–∞–ª–∞"""
    channel_id = callback.data.split("_", 1)[1]

    try:
        await db.update_channel_status(channel_id, False)
        await callback.answer("‚úÖ –ö–∞–Ω–∞–ª –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")

        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        await show_channel_details(callback, db)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–∞: {str(e)}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–∞")


@router.callback_query(F.data.startswith("delete_"))
async def confirm_delete_channel(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞"""
    channel_id = callback.data.split("_", 1)[1]

    await callback.message.edit_text(
        "‚ö†Ô∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è</b>\n\n"
        "–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª?\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
        parse_mode="HTML",
        reply_markup=confirmation_keyboard("delete_channel", channel_id)
    )


@router.callback_query(F.data.startswith("confirm_delete_channel_"))
async def delete_channel(callback: CallbackQuery, db: DatabaseModels):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞"""
    channel_id = callback.data.split("_", 3)[3]

    try:
        await db.delete_channel(channel_id)

        await callback.message.edit_text(
            "‚úÖ <b>–ö–∞–Ω–∞–ª —É–¥–∞–ª–µ–Ω</b>\n\n"
            "–ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞.",
            parse_mode="HTML",
            reply_markup=channels_management_keyboard()
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞: {str(e)}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞")


@router.callback_query(F.data.startswith("cancel_"))
async def cancel_action(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è"""
    await state.clear()

    await callback.message.edit_text(
        "‚ùå <b>–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ</b>",
        parse_mode="HTML",
        reply_markup=channels_management_keyboard()
    )


@router.callback_query(F.data == "back_to_channels")
async def back_to_channels(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∫–∞–Ω–∞–ª–∞–º–∏"""
    await callback.message.edit_text(
        "üì∫ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏</b>\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å, –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞—à–∏–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.",
        parse_mode="HTML",
        reply_markup=channels_management_keyboard()
    )