from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import logging

from utils.keyboards import (
    settings_keyboard, schedule_settings_keyboard, style_settings_keyboard,
    time_selection_keyboard, interval_selection_keyboard, cancel_keyboard
)
from database.models import DatabaseModels
from services.scheduler import PostScheduler
from config import ADMIN_ID

logger = logging.getLogger(__name__)
router = Router()


class SettingsStates(StatesGroup):
    waiting_for_custom_time = State()
    waiting_for_posts_limit = State()
    waiting_for_interval_minutes = State()


def is_admin(user_id: int) -> bool:
    return user_id == ADMIN_ID


@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def show_settings_menu(message: Message):
    """–ü–æ–∫–∞–∑ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    if not is_admin(message.from_user.id):
        return

    await message.answer(
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞</b>\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞:",
        parse_mode="HTML",
        reply_markup=settings_keyboard()
    )


@router.callback_query(F.data == "schedule_settings")
async def show_schedule_settings(callback: CallbackQuery, db: DatabaseModels):
    """–ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        schedule_type = await db.get_setting("schedule_type") or "interval"

        if schedule_type == "times":
            times = await db.get_setting("schedule_times") or "09:00,15:00,21:00"
            current_info = f"–¢–∏–ø: –ü–æ –≤—Ä–µ–º–µ–Ω–∏\n–í—Ä–µ–º—è: {times.replace(',', ', ')}"
        else:
            interval = await db.get_setting("schedule_interval") or "3"
            current_info = f"–¢–∏–ø: –ü–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º\n–ò–Ω—Ç–µ—Ä–≤–∞–ª: –∫–∞–∂–¥—ã–µ {interval} —á–∞—Å–∞"

        text = f"""
‚è∞ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è</b>

<b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>
{current_info}

<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:</b>
‚Ä¢ <b>–ü–æ –≤—Ä–µ–º–µ–Ω–∏</b> - –ø—É–±–ª–∏–∫–∞—Ü–∏—è –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —á–∞—Å—ã
‚Ä¢ <b>–ü–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º</b> - –ø—É–±–ª–∏–∫–∞—Ü–∏—è –∫–∞–∂–¥—ã–µ N —á–∞—Å–æ–≤
        """

        await callback.message.edit_text(
            text,
            parse_mode="HTML",
            reply_markup=schedule_settings_keyboard()
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {str(e)}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫")


@router.callback_query(F.data == "schedule_by_time")
async def setup_time_schedule(callback: CallbackQuery):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏"""
    text = """
‚è∞ <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏</b>

–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.
–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.

<b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –≤—Ä–µ–º—è:</b>
‚Ä¢ <b>–£—Ç—Ä–æ:</b> 06:00 - 09:00
‚Ä¢ <b>–î–µ–Ω—å:</b> 12:00 - 15:00  
‚Ä¢ <b>–í–µ—á–µ—Ä:</b> 18:00 - 21:00

–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–µ:
    """

    await callback.message.edit_text(
        text,
        parse_mode="HTML",
        reply_markup=time_selection_keyboard()
    )


@router.callback_query(F.data.startswith("time_"))
async def select_time(callback: CallbackQuery, db: DatabaseModels, scheduler: PostScheduler):
    """–í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    time_code = callback.data.split("_")[1]
    time_str = f"{time_code[:2]}:{time_code[2:]}"

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –≤—Ä–µ–º–µ–Ω–∞
        current_times = await db.get_setting("schedule_times") or ""
        times_list = [t.strip() for t in current_times.split(",") if t.strip()]

        if time_str in times_list:
            # –£–±–∏—Ä–∞–µ–º –≤—Ä–µ–º—è
            times_list.remove(time_str)
            action = "—É–¥–∞–ª–µ–Ω–æ"
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è
            times_list.append(time_str)
            action = "–¥–æ–±–∞–≤–ª–µ–Ω–æ"

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–∞
        times_list.sort()
        new_times = ",".join(times_list)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        await db.set_setting("schedule_type", "times")
        await db.set_setting("schedule_times", new_times)

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        if times_list:
            scheduler.schedule_daily_posts(times_list)

        times_display = ", ".join(times_list) if times_list else "–Ω–µ –≤—ã–±—Ä–∞–Ω–æ"

        await callback.answer(f"‚úÖ –í—Ä–µ–º—è {time_str} {action}")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        text = f"""
‚è∞ <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏</b>

<b>–í—ã–±—Ä–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞:</b> {times_display}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É:
        """

        await callback.message.edit_text(
            text,
            parse_mode="HTML",
            reply_markup=time_selection_keyboard()
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏: {str(e)}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏")


@router.callback_query(F.data == "custom_time")
async def custom_time_input(callback: CallbackQuery, state: FSMContext):
    """–í–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
    await state.set_state(SettingsStates.waiting_for_custom_time)

    await callback.message.edit_text(
        "‚è∞ <b>–°–≤–æ–µ –≤—Ä–µ–º—è</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä: 14:30)\n"
        "–ú–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:\n"
        "<code>09:00, 14:30, 20:15</code>",
        parse_mode="HTML",
        reply_markup=cancel_keyboard()
    )


@router.message(StateFilter(SettingsStates.waiting_for_custom_time))
async def process_custom_time(message: Message, state: FSMContext, db: DatabaseModels, scheduler: PostScheduler):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
    if not is_admin(message.from_user.id):
        return

    time_input = message.text.strip()

    # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º–µ–Ω–∞
    import re
    time_pattern = r'^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$'

    times_list = []
    for time_str in time_input.split(','):
        time_str = time_str.strip()
        if re.match(time_pattern, time_str):
            times_list.append(time_str)
        else:
            await message.answer(
                f"‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏:</b> {time_str}\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä: 14:30)",
                parse_mode="HTML"
            )
            return

    if not times_list:
        await message.answer(
            "‚ùå <b>–ù–µ —É–∫–∞–∑–∞–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM",
            parse_mode="HTML"
        )
        return

    try:
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
        times_list.sort()
        times_str = ",".join(times_list)

        await db.set_setting("schedule_type", "times")
        await db.set_setting("schedule_times", times_str)

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        scheduler.schedule_daily_posts(times_list)

        await state.clear()

        await message.answer(
            f"‚úÖ <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!</b>\n\n"
            f"<b>–í—Ä–µ–º–µ–Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:</b> {', '.join(times_list)}\n\n"
            f"–ë–æ—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç—ã –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è.",
            parse_mode="HTML",
            reply_markup=settings_keyboard()
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏: {str(e)}")
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            parse_mode="HTML"
        )


@router.callback_query(F.data == "schedule_by_interval")
async def setup_interval_schedule(callback: CallbackQuery):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º"""
    text = """
üîÑ <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º</b>

–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø—É–±–ª–∏–∫–∞—Ü–∏—è–º–∏.
–ë–æ—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç—ã —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–∏.

<b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>
‚Ä¢ <b>1-2 —á–∞—Å–∞</b> - –¥–ª—è –æ—á–µ–Ω—å –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
‚Ä¢ <b>3-4 —á–∞—Å–∞</b> - –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –∫–∞–Ω–∞–ª–æ–≤
‚Ä¢ <b>6-8 —á–∞—Å–æ–≤</b> - –¥–ª—è —Å–ø–æ–∫–æ–π–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
‚Ä¢ <b>12 —á–∞—Å–æ–≤</b> - –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å

–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª:
    """

    await callback.message.edit_text(
        text,
        parse_mode="HTML",
        reply_markup=interval_selection_keyboard()
    )


@router.callback_query(F.data.startswith("interval_"))
async def select_interval(callback: CallbackQuery, db: DatabaseModels, scheduler: PostScheduler):
    """–í—ã–±–æ—Ä –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    interval_hours = callback.data.split("_")[1]

    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        await db.set_setting("schedule_type", "interval")
        await db.set_setting("schedule_interval", interval_hours)

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        scheduler.schedule_interval_posts(int(interval_hours))

        await callback.message.edit_text(
            f"‚úÖ <b>–ò–Ω—Ç–µ—Ä–≤–∞–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!</b>\n\n"
            f"<b>–ü—É–±–ª–∏–∫–∞—Ü–∏—è –∫–∞–∂–¥—ã–µ:</b> {interval_hours} —á–∞—Å–∞\n\n"
            f"–ë–æ—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç—ã —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã.",
            parse_mode="HTML",
            reply_markup=schedule_settings_keyboard()
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞: {str(e)}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞")


@router.callback_query(F.data == "current_schedule")
async def show_current_schedule(callback: CallbackQuery, db: DatabaseModels, scheduler: PostScheduler):
    """–ü–æ–∫–∞–∑ —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    try:
        schedule_type = await db.get_setting("schedule_type") or "–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ"

        if schedule_type == "times":
            times = await db.get_setting("schedule_times") or ""
            if times:
                times_list = times.split(",")
                schedule_info = f"<b>–¢–∏–ø:</b> –ü–æ –≤—Ä–µ–º–µ–Ω–∏\n<b>–í—Ä–µ–º–µ–Ω–∞:</b> {', '.join(times_list)}"
            else:
                schedule_info = "<b>–¢–∏–ø:</b> –ü–æ –≤—Ä–µ–º–µ–Ω–∏\n<b>–í—Ä–µ–º–µ–Ω–∞:</b> –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
        elif schedule_type == "interval":
            interval = await db.get_setting("schedule_interval") or "–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
            schedule_info = f"<b>–¢–∏–ø:</b> –ü–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º\n<b>–ò–Ω—Ç–µ—Ä–≤–∞–ª:</b> –∫–∞–∂–¥—ã–µ {interval} —á–∞—Å–∞"
        else:
            schedule_info = "<b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ</b>"

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö
        jobs = scheduler.get_scheduled_jobs()
        jobs_info = ""

        if jobs:
            jobs_info = "\n\n<b>–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:</b>\n"
            for i, job in enumerate(jobs[:3], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                next_run = job.get('next_run', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                jobs_info += f"{i}. –°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫: {next_run}\n"

        text = f"""
üìÖ <b>–¢–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ</b>

{schedule_info}
{jobs_info}

<b>–°—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞:</b> {'üü¢ –†–∞–±–æ—Ç–∞–µ—Ç' if scheduler.running else 'üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}
        """

        await callback.message.edit_text(
            text,
            parse_mode="HTML",
            reply_markup=schedule_settings_keyboard()
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {str(e)}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")


@router.callback_query(F.data == "style_settings")
async def show_style_settings(callback: CallbackQuery, db: DatabaseModels):
    """–ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å—Ç–∏–ª—è"""
    try:
        current_style = await db.get_setting("default_style") or "engaging"

        style_descriptions = {
            "casual": "üòä –î—Ä—É–∂–µ–ª—é–±–Ω—ã–π - –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π, —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π —Å—Ç–∏–ª—å",
            "neutral": "üì∞ –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π - –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Å—Ç–∏–ª—å",
            "engaging": "üéØ –ü—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π - —Å —ç–º–æ–¥–∑–∏ –∏ –ø—Ä–∏–∑—ã–≤–∞–º–∏ –∫ –¥–µ–π—Å—Ç–≤–∏—é",
            "formal": "üëî –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π - –¥–µ–ª–æ–≤–æ–π, —Å—Ç—Ä–æ–≥–∏–π —Å—Ç–∏–ª—å"
        }

        current_desc = style_descriptions.get(current_style, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")

        text = f"""
üé® <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç–∏–ª—è –ø–æ—Å—Ç–æ–≤</b>

<b>–¢–µ–∫—É—â–∏–π —Å—Ç–∏–ª—å:</b> {current_desc}

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∏–ª–∏:</b>

{chr(10).join(style_descriptions.values())}

–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∏–ª—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π:
        """

        await callback.message.edit_text(
            text,
            parse_mode="HTML",
            reply_markup=style_settings_keyboard()
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å—Ç–∏–ª—è: {str(e)}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫")


@router.callback_query(F.data.startswith("style_"))
async def select_style(callback: CallbackQuery, db: DatabaseModels):
    """–í—ã–±–æ—Ä —Å—Ç–∏–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    style = callback.data.split("_")[1]

    style_names = {
        "casual": "üòä –î—Ä—É–∂–µ–ª—é–±–Ω—ã–π",
        "neutral": "üì∞ –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π",
        "engaging": "üéØ –ü—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π",
        "formal": "üëî –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π"
    }

    try:
        await db.set_setting("default_style", style)

        style_name = style_names.get(style, style)

        await callback.message.edit_text(
            f"‚úÖ <b>–°—Ç–∏–ª—å –∏–∑–º–µ–Ω–µ–Ω!</b>\n\n"
            f"<b>–ù–æ–≤—ã–π —Å—Ç–∏–ª—å:</b> {style_name}\n\n"
            f"–í—Å–µ –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã –±—É–¥—É—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Å—Ç–∏–ª–µ.",
            parse_mode="HTML",
            reply_markup=style_settings_keyboard()
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∏–ª—è: {str(e)}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∏–ª—è")


@router.callback_query(F.data == "limits_settings")
async def show_limits_settings(callback: CallbackQuery, db: DatabaseModels):
    """–ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ª–∏–º–∏—Ç–æ–≤"""
    try:
        max_posts_per_day = await db.get_setting("max_posts_per_day") or "20"
        min_interval_minutes = await db.get_setting("min_interval_minutes") or "30"

        text = f"""
üìä <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–∏–º–∏—Ç–æ–≤</b>

<b>–¢–µ–∫—É—â–∏–µ –ª–∏–º–∏—Ç—ã:</b>
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º –ø–æ—Å—Ç–æ–≤ –≤ –¥–µ–Ω—å: {max_posts_per_day}
‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: {min_interval_minutes} –º–∏–Ω—É—Ç

<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>
‚Ä¢ <b>–ú–∞–∫—Å–∏–º—É–º –ø–æ—Å—Ç–æ–≤ –≤ –¥–µ–Ω—å</b> - –æ–±—â–∏–π –ª–∏–º–∏—Ç –¥–ª—è –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤
‚Ä¢ <b>–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª</b> - –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –º–µ–∂–¥—É –ø—É–±–ª–∏–∫–∞—Ü–∏—è–º–∏

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:
<code>/maxposts [—á–∏—Å–ª–æ]</code> - –∏–∑–º–µ–Ω–∏—Ç—å –º–∞–∫—Å–∏–º—É–º –ø–æ—Å—Ç–æ–≤ (1-50)
<code>/interval [–º–∏–Ω—É—Ç—ã]</code> - –∏–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª (10-120 –º–∏–Ω—É—Ç)
        """

        await callback.message.edit_text(
            text,
            parse_mode="HTML",
            reply_markup=cancel_keyboard()
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤: {str(e)}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫")


@router.callback_query(F.data == "ai_settings")
async def show_ai_settings(callback: CallbackQuery, db: DatabaseModels):
    """–ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ò–ò"""
    try:
        creativity = await db.get_setting("ai_creativity") or "0.7"
        max_length = await db.get_setting("ai_max_length") or "800"
        language = await db.get_setting("ai_language") or "russian"

        text = f"""
ü§ñ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ò–ò –æ–±—Ä–∞–±–æ—Ç–∫–∏</b>

<b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>
‚Ä¢ –ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å: {creativity} (0.0-1.0)
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: {max_length} —Å–∏–º–≤–æ–ª–æ–≤
‚Ä¢ –Ø–∑—ã–∫: {language}

<b>–û–ø–∏—Å–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:</b>
‚Ä¢ <b>–ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å</b> - –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ç–≤–æ—Ä—á–µ—Å–∫–∏ –ò–ò –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç—ã
‚Ä¢ <b>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞</b> - –ª–∏–º–∏—Ç —Å–∏–º–≤–æ–ª–æ–≤ –≤ –ø–æ—Å—Ç–µ
‚Ä¢ <b>–Ø–∑—ã–∫</b> - –æ—Å–Ω–æ–≤–Ω–æ–π —è–∑—ã–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏

<b>–ö–∞—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏:</b>
‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ–≤
‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏
‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ö–µ—à—Ç–µ–≥–æ–≤

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:
<code>/creativity [0.1-1.0]</code> - –∏–∑–º–µ–Ω–∏—Ç—å –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å
<code>/maxlength [200-1000]</code> - –∏–∑–º–µ–Ω–∏—Ç—å –¥–ª–∏–Ω—É
        """

        await callback.message.edit_text(
            text,
            parse_mode="HTML",
            reply_markup=cancel_keyboard()
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ò–ò: {str(e)}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫")


@router.callback_query(F.data == "notification_settings")
async def show_notification_settings(callback: CallbackQuery, db: DatabaseModels):
    """–ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    try:
        notify_errors = await db.get_setting("notify_errors") or "true"
        notify_success = await db.get_setting("notify_success") or "false"
        notify_stats = await db.get_setting("notify_daily_stats") or "true"

        error_status = "‚úÖ –í–∫–ª—é—á–µ–Ω—ã" if notify_errors == "true" else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã"
        success_status = "‚úÖ –í–∫–ª—é—á–µ–Ω—ã" if notify_success == "true" else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã"
        stats_status = "‚úÖ –í–∫–ª—é—á–µ–Ω—ã" if notify_stats == "true" else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã"

        text = f"""
üîî <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>

<b>–¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:</b>

<b>–û—à–∏–±–∫–∏ –∏ –ø—Ä–æ–±–ª–µ–º—ã:</b> {error_status}
‚Ä¢ –û—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –∫–∞–Ω–∞–ª–∞–º–∏
‚Ä¢ –û—à–∏–±–∫–∏ –ò–ò –æ–±—Ä–∞–±–æ—Ç–∫–∏

<b>–£—Å–ø–µ—à–Ω—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:</b> {success_status}
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫–∞–∂–¥–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ—Å—Ç–∞–º

<b>–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b> {stats_status}
‚Ä¢ –°–≤–æ–¥–∫–∞ –∑–∞ –¥–µ–Ω—å
‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤

–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:
        """

        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(
                    text=f"{'üî¥ –û—Ç–∫–ª—é—á–∏—Ç—å' if notify_errors == 'true' else 'üü¢ –í–∫–ª—é—á–∏—Ç—å'} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö",
                    callback_data="toggle_notify_errors"
                )],
                [InlineKeyboardButton(
                    text=f"{'üî¥ –û—Ç–∫–ª—é—á–∏—Ç—å' if notify_success == 'true' else 'üü¢ –í–∫–ª—é—á–∏—Ç—å'} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—É–±–ª–∏–∫–∞—Ü–∏—è—Ö",
                    callback_data="toggle_notify_success"
                )],
                [InlineKeyboardButton(
                    text=f"{'üî¥ –û—Ç–∫–ª—é—á–∏—Ç—å' if notify_stats == 'true' else 'üü¢ –í–∫–ª—é—á–∏—Ç—å'} –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É",
                    callback_data="toggle_notify_stats"
                )],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_settings")]
            ]
        )

        await callback.message.edit_text(
            text,
            parse_mode="HTML",
            reply_markup=keyboard
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {str(e)}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫")


@router.callback_query(F.data.startswith("toggle_notify_"))
async def toggle_notification(callback: CallbackQuery, db: DatabaseModels):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    setting_name = callback.data.replace("toggle_", "")

    try:
        current_value = await db.get_setting(setting_name) or "false"
        new_value = "false" if current_value == "true" else "true"

        await db.set_setting(setting_name, new_value)

        setting_names = {
            "notify_errors": "—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö",
            "notify_success": "—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—É–±–ª–∏–∫–∞—Ü–∏—è—Ö",
            "notify_stats": "–µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
        }

        setting_display = setting_names.get(setting_name, setting_name)
        status = "–≤–∫–ª—é—á–µ–Ω—ã" if new_value == "true" else "–æ—Ç–∫–ª—é—á–µ–Ω—ã"

        await callback.answer(f"‚úÖ {setting_display.title()} {status}")

        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        await show_notification_settings(callback, db)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {str(e)}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫")


@router.callback_query(F.data == "back_to_settings")
async def back_to_settings(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    await callback.message.edit_text(
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞</b>\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞:",
        parse_mode="HTML",
        reply_markup=settings_keyboard()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–¥–ª—è –ª–∏–º–∏—Ç–æ–≤ –∏ –ò–ò)
@router.message(F.text.startswith("/maxposts "))
async def set_max_posts(message: Message, db: DatabaseModels):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Å—Ç–æ–≤"""
    if not is_admin(message.from_user.id):
        return

    try:
        max_posts = int(message.text.split()[1])
        if 1 <= max_posts <= 50:
            await db.set_setting("max_posts_per_day", str(max_posts))
            await message.answer(
                f"‚úÖ –ú–∞–∫—Å–∏–º—É–º –ø–æ—Å—Ç–æ–≤ –≤ –¥–µ–Ω—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {max_posts}",
                reply_markup=settings_keyboard()
            )
        else:
            await message.answer("‚ùå –ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 50")
    except (ValueError, IndexError):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /maxposts 20")


@router.message(F.text.startswith("/interval "))
async def set_min_interval(message: Message, db: DatabaseModels):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞"""
    if not is_admin(message.from_user.id):
        return

    try:
        interval = int(message.text.split()[1])
        if 10 <= interval <= 120:
            await db.set_setting("min_interval_minutes", str(interval))
            await message.answer(
                f"‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {interval} –º–∏–Ω—É—Ç",
                reply_markup=settings_keyboard()
            )
        else:
            await message.answer("‚ùå –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 10 –¥–æ 120 –º–∏–Ω—É—Ç")
    except (ValueError, IndexError):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /interval 30")


@router.message(F.text.startswith("/creativity "))
async def set_creativity(message: Message, db: DatabaseModels):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ò–ò"""
    if not is_admin(message.from_user.id):
        return

    try:
        creativity = float(message.text.split()[1])
        if 0.1 <= creativity <= 1.0:
            await db.set_setting("ai_creativity", str(creativity))
            await message.answer(
                f"‚úÖ –ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å –ò–ò —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {creativity}",
                reply_markup=settings_keyboard()
            )
        else:
            await message.answer("‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 0.1 –¥–æ 1.0")
    except (ValueError, IndexError):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /creativity 0.7")


@router.message(F.text.startswith("/maxlength "))
async def set_max_length(message: Message, db: DatabaseModels):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã –ø–æ—Å—Ç–∞"""
    if not is_admin(message.from_user.id):
        return

    try:
        max_length = int(message.text.split()[1])
        if 200 <= max_length <= 1000:
            await db.set_setting("ai_max_length", str(max_length))
            await message.answer(
                f"‚úÖ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –ø–æ—Å—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {max_length} —Å–∏–º–≤–æ–ª–æ–≤",
                reply_markup=settings_keyboard()
            )
        else:
            await message.answer("‚ùå –î–ª–∏–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 200 –¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤")
    except (ValueError, IndexError):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /maxlength 800")